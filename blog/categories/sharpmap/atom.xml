<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SharpMap | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/sharpmap/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2014-05-27T19:09:15-04:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SharpMap 1.0 RC1 Released]]></title>
    <link href="http://blog.geomusings.com/2013/03/28/sharpmap-1-dot-0-rc1-released/"/>
    <updated>2013-03-28T06:10:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/03/28/sharpmap-1-dot-0-rc1-released</id>
    <content type="html"><![CDATA[<p>Over on Google+, <a href="https://plus.google.com/u/0/117900686009614580552/posts">Diego Guidi</a> let me know that the <a href="http://sharpmap.codeplex.com/releases/view/104098">SharpMap 1.0 Release Candidate has been released</a>. There was a time when I worked with, <a href="https://www.google.com/search?q=site%3Ablog.geomusings.com&amp;q=sharpmap">and wrote about</a>, SharpMap a lot. During that entire time, the stable version of SharpMap sat at some version number that started with "0.9". The release of a 1.0 candidate is a signal that the project is moving forward.</p>

<p style="text-align:center;"> <img src="http://www.zekiah.com/sites/default/files/images/SharpMapSQL2008.preview.png" /></p>

<p>This is important because there are still an awful lot of .Net developers out there, especially in government shops that made a big Microsoft push in terms of infrastructure and training years ago. Of course, many of those shops are also committed to Esri technologies but SharpMap, while being a fully-functioning mapping/GIS library, also provides easy access to data sources not natively supported by Esri. Additionally, it is very easy to extend to support new or custom data sources and strightforward to <a href="http://www.zekiah.com/index.php?q=node/146">get SharpMap to play nicely in traditionally Esri-centric environments</a>.</p>

<!--more-->


<p>At <a href="http://www.zekiah.com">my company</a> we've used SharpMap for just that for one of our key Navy customers. By building custom SharpMap data sources, we've been able to encapsulate business logic in Oracle, including the use of Oracle <a href="http://www.slideshare.net/shawty_ds/what-is-spatial-sql">Spatial SQL</a> to execute spatial analysis processes and deliver the results back to an Esri web client that is also interacting with ArcGIS Server for many standard functions. SharpMap enabled us to expose this logic through an HTTP+JSON interface while bypassing geodatabases, server object extensions, and other such cruft.</p>

<p>In recent years, other open-source .Net projects such as <a href="https://dotspatial.codeplex.com/">DotSpatial</a> have gained traction and that's good. The .Net environment remains in widespread use so it is useful to have open-source geospatial options for that platform. I'm happy to see SharpMap remaining an option in that space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using BruTile and MapsUI to Enable WeoGeo Previews]]></title>
    <link href="http://blog.geomusings.com/2011/03/21/using-brutile-and-mapsui-to-enable-weogeo-previews/"/>
    <updated>2011-03-21T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2011/03/21/using-brutile-and-mapsui-to-enable-weogeo-previews</id>
    <content type="html"><![CDATA[<p>A few weeks ago, <a href="http://geobabble.wordpress.com/2011/03/02/announcing-weogeo-tools-for-arcgis/">my company announced the availability</a> of the first beta version of <a href="http://www.zekiah.com/index.php?q=weogeo">WeoGeo Tools for ArcGIS</a>. Unlike the previous version, which opened a separate browser window, this new release allows a user to order a data set from <a href="http://market.weogeo.com">WeoGeo Market</a> or a library from inside ArcMap.</p>

<p>One of the challenges was enabling data set previews. If you browse data sets using the <a href="http://www.weogeo.com">WeoGeo</a> online tool, you can get an idea of what the data set contains by using the data set preview images supplied by the data set provider.</p>

<p>When we developed the first version of WeoGeo Tools for WeoGeo, they used kamap to create preview tiles for data sets. This was accomplished by used either one of two desktop tools: the weoapp (command line) or gWeoApp (GUI). The first version of WeoGeo Tools used the weoapp in the background to create tiles when uploading data. <!--more--></p>

<p>In between the two versions, WeoGeo switched to a ZYX tile structure similar to Google Maps or <a href="http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification">TMS</a> (although not always using spherical mercator). This change made the idea of integrating ordering much easier.</p>

<p>Part of the challenge was implementing support for preview tiles in a manner that provided a smooth user experience inside ArcMap. Luckily, my experience with <a href="http://sharpmap.codeplex.com/">SharpMap</a> pointed the way. It's been a while since I've blogged SharpMap but, in the intervening time, the project added support for map tiles by way of another .Net-based open-source project called <a href="http://brutile.codeplex.com/">BruTile</a>. It was through SharpMap that I was first exposed to BruTile and the two projects have developed something of a symbiotic relationship.</p>

<p>A while back, BruTile branched, with its UI aspects being spun off into another project called <a href="http://mapsui.codeplex.com/">MapsUI</a>. Between these two projects, I had what I needed to added support for WeoGeo previews. I've been building the UI elements of WeoGeo tools using Windows Presentation Foundation (WPF) from the beginning. MapsUI provided exactly what I needed in a simple WPF map control to embed tile support into my application.</p>

<div style="text-align: center;"><a href="http://geobabble.files.wordpress.com/2011/03/orderwindow.png"><img alt="" class="size-full wp-image-1574" height="491" src="http://geobabble.files.wordpress.com/2011/03/orderwindow.png" title="Order window showing preview tiles for Maryland census tracts" width="590" /></a><div style="text-align: center;font-size: 14px">Order window showing preview tiles for Maryland census tracts<br/></div></div>


<p>Because WeoGeo chose well-known tiling schemes for their previews, most of what I needed was already there. For data sets with preview tiles in spherical mercator, there was already a BruTile schema defined for working with Google Maps that I could leverage. For tiles in WGS84, there was also a schema defined based on the work <a href="http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/">documented at the MapTiler site</a> (which is the same schema WeoGeo uses for WGS84 tiles).</p>

<p>The primary customization that was required was to create custom request classes that formatted tile request URLs for WeoGeo. To get a tile from WeoGeo, you need to know two pieces of information in addition to the Z, Y and X positions of the tile: you also need to know the data set (identified by a GUID) for which you want tiles and the file format (JPG or PNG) of those tiles. So you end up with a URL that looks like this:</p>

<p><em>http://weodata.weogeo.com/dataset_tiles/{dataset_token}/xyz/{Z}/{Y}/{X}.{format}</em></p>

<p>Beyond the request, you can fine-tune the tile schema by using information from the data set metadata to set the tile extent and remove unused scale levels. For spherical mercator tiles, for example, I defined custom tile source, tile schema and request classes that defined these additional pieces of information. The result was the ability to very easily create a TileLayer for use by the MapsUI control:</p>

<p>{% codeblock lang:csharp %}
//_dataSet is deserialized from JSON and contains the data set metadata</p>

<p>//Create schema based on data set format, min and max scaled and tile extent</p>

<pre><code>        var weoSchema = new WeoGeoSchema(_dataSet.TileFileFormat, _dataSet.Scales[0], _dataSet.Scales[_ds.Scales.Count - 1], new BruTile.Extent(_dataSet.Boundaries.Tiles.West, _dataSet.Boundaries.Tiles.South, _dataSet.Boundaries.Tiles.East, _dataSet.Boundaries.Tiles.North));
        var weosource = new WeoGeoTileSource(new WeoGeoRequest("http://weodata.weogeo.com", _dataSet.Token, _dataSet.Scales[0], _dataSet.Scales[_dataSet.Scales.Count - 1], _dataSet.TileFileFormat), weoSchema);
        var tl = new TileLayer(weosource); //the layer to be added to the map control
</code></pre>

<p>{% endcodeblock %}</p>

<p>Using BruTile, this aspect of adding support for ordering went very quickly and smoothly. I like that they have native WPF UI components as I generally avoid using WinForms anymore when doing Windows desktop development. There's a lot of good work between BruTile and MapsUI and I'll be using these tools more in the future.</p>
]]></content>
  </entry>
  
</feed>
