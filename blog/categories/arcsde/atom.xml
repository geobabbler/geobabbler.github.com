<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: arcsde | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/arcsde/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2012-12-17T11:04:10-05:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using ArcSDE 9.3 with PostgreSQL, Part 3.5]]></title>
    <link href="http://blog.geomusings.com/2008/08/21/Using-ArcSDE-9.3-with-PostgreSQL-Part-3.5/"/>
    <updated>2008-08-21T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2008/08/21/Using-ArcSDE-9.3-with-PostgreSQL-Part-3.5</id>
    <content type="html"><![CDATA[<p>I thought I was done with the series a while back but I've been getting a steady stream of questions through other channels so I thought I'd wrap up a lot of the common stuff in another post. Most of the inquiries come from people trying to integrate <a href="http://www.esri.com/software/arcgis/arcsde/index.html">ArcSDE</a> for <a href="http://www.postgresql.org">PostgreSQL</a> with open-source tools in one way or another. Here are a few notes:<!--more--></p>

<ol type="1">
    <li>If you plan to load data into PostgreSQL with ArcCatalog but plan to edit it with tools such as <a href="http://udig.refractions.net/">uDig</a>, <a href="http://www.gvsig.gva.es/index.php?id=gvsig&amp;L=2">gvSIG</a> or <a href="http://pub.obtusesoft.com/">zigGIS</a>, then you want to do the following:
             <ol type="a">
                  <li>Always load your data with the PG_GEOMETRY configuration keyword. This will cause your spatial objects to be stored in the <a href="http://postgis.refractions.net/">PostGIS</a> format. None of the open-source tools I've used can understand ST_GEOMETRY.</li>
                  <li>Don't version your data. uDig, gvSIG and zigGIS (what I've used) only "see" the DEFAULT version anyway. They can't take advantage of versioning.</li>
                  <li>Although ArcCatalog does put an entry in the PostGIS geometry_columns table, it lists the geometry type as GEOMETRY. gvSIG edits this fine but it seems to monkey with uDig a little. It's not a bad idea to update this with the actual geometry type. These will be string values such as "POLYGON", "MULTIPOLYGON", etc. You'll need to do this if you plan to edit your data with zigGIS from an ArcView desktop.</li>
                  <li>Related to the previous item. If you were to load data using shp2pgsql or any other method that calls the PostGIS <a href="http://postgis.refractions.net/documentation/manual-1.3/ch06.html#id3059786">AddGeometryColumn</a> function, you would end up with constraints on your table limiting the geometry column to a homogenous geometry type (e.g only polygons) and a homogenous SRID. Loading via ArcCatalog doesn't do this (and I've run into other tools that don't as well). Quite frankly ArcSDE manages all of that for itself so it doesn't need such constraints. Without them, however, you can use other tools and mix your geometry types and SRIDs in the table. It's a good idea to add these constraints and I have noticed no ill effects on ArcGIS if you do.</li>
                   <li>As we discovered with zigGIS, there is a difference between the spatial references that are defined by default on the PostGIS spatial_ref_sys table and the ArcSDE sde_spatial_references table. This makes it possible to load data via ArcCatalog that doesn't have a corresponding SRID in the PostGIS table. This would effect your ability to add the previously discussed constraint. It will also throw off open-source tools that look at the spatial_ref_sys table. It's a good idea to update spatial_ref_sys to include those from ArcGIS that are not already supported.</li>
                    <li>ArcCatalog doesn't define a primary key on your spatial table. uDig really doesn't like this so it's best to add a primary key on the objectid column (this has no effect on ArcGIS that I can tell) using the following syntax:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='postgres'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">myTable</span>
</span><span class='line'><span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">mytable_pkey</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">objectid</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
gvSIG additionally expects the column with the PK to "auto-number" so you may want to experiment with adding a sequence to the column. The syntax I used to do this is:

 <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='postgres'><span class='line'><span class="k">CREATE</span> <span class="k">SEQUENCE</span> <span class="n">mytable_gid_seq</span>
</span><span class='line'><span class="k">INCREMENT</span> <span class="mf">1</span>
</span><span class='line'><span class="k">MINVALUE</span> <span class="mf">1</span>
</span><span class='line'><span class="k">MAXVALUE</span> <span class="mf">9223372036854775807</span>
</span><span class='line'><span class="k">START</span> <span class="mf">408</span>
</span><span class='line'><span class="k">CACHE</span> <span class="mf">1</span><span class="p">;</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">mytable_gid_seq</span> <span class="k">OWNER</span> <span class="k">TO</span> <span class="n">postgres</span><span class="p">;</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">myTable</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="n">objectid</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="n">nextval</span><span class="p">(</span><span class="o">?</span><span class="n">mytable_gid_seq</span><span class="o">?::</span><span class="n">regclass</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>                 
If you're experienced with ArcSDE, you get nervous mucking with the objectid column. I have made both the of the above changes to several data sets and made edits in uDig, gvSIG and ArcMap with no ill effect.</li>
</ol>
<li>If you plan to edit/manage your data using ArcGIS but serve it out using an open-source application like GeoServer or MapServer then there are a few considerations:
            <ol type="a">
            <li>If you plan to use versioning, then be diligent about posting and reconciling with DEFAULT so that any changes want to have show up will. Of course, this assumes you would just be connecting to the PostGIS data. If you connect through ArcSDE, this <em>may</em> be unnecessary.</li>
            <li>Again, use the PG_GEOMETRY keyword.</li>
            <li>The SRID issue discussed in item 1e above <em>may</em> be relevant here as well.</li>
            </ol>
</li>
<li>The implementation of ArcSDE on the PostgreSQL platform is pretty solid. I have been able to do everything I could do on other platforms. So, if you plan to stay in the ESRI environment, go forth an conquer. I think you'll be pleased with PostgreSQL. You may want to bone up on PostgreSQL database administration, though.</li>

Ultimately, support for PostgreSQL by ArcGIS opens up the possibility of numerous technology mixes. It's somewhat uncharted territory and it's not a bad idea, as with any system integration task, to do a little testing and experimentation before moving on with an implementation.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArcSDE - Time For a Change]]></title>
    <link href="http://blog.geomusings.com/2007/11/05/ArcSDE-Time-For-a-Change/"/>
    <updated>2007-11-05T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2007/11/05/ArcSDE-Time-For-a-Change</id>
    <content type="html"><![CDATA[<p>I view <a href="http://www.esri.com/software/arcgis/arcsde/">ArcSDE</a> (and its predecessor, SDE) as something of a seminal technology. In my quest for true enterprise integration of GIS, ArcSDE <del datetime="2009-05-04T21:24:40+00:00">fills</del> filled a crucial gap by providing the ability to store, manage and analyze spatial data in the same <a href="http://en.wikipedia.org/wiki/Relational_database_management_system">RDBMS</a> used for everything else. Long gone are the days when I had to manage relates between INFO tables or shapefiles and that's a good thing. I have since accomplished similar tasks with <a href="http://postgis.refractions.net/">PostGIS</a> and <a href="http://www.oracle.com/technology/products/spatial/index.html">Oracle Spatial</a> but SDE was the first product I ever used that offered the capability to bring my GIS in from the cold.</p>

<p>At version 9.3, ArcSDE will support <a href="http://www.postgresql.org/">PostgreSQL</a> as a back-end, meaning you don't <em>also</em> need to license an expensive RDBMS in addition to ArcGIS to take advantage of everything ArcGIS Server has to offer. This gives us another option and options are good.</p>

<p>I have blogged before about my involvment with <a href="http://code.google.com/p/ziggis/">zigGIS</a>, which has given me a lot of exposure to PostGIS. I've also done a good bit of work with Oracle Spatial. Both experiences have given me experience with, and a love of, spatial SQL (as each has implemented it). Having all of the data types and methods necessary to store, manage and analyze spatial data completely encapsulated in the RDBMS is a huge advantage. Building an n-tier or services-oriented system is so much easier because all I really need to interact with my spatial data is an OLEDB provider (we're a .NET shop). This encapsulation serves to further expose the disadvantages of the current middleware approach of ArcSDE.<!--more--></p>

<p>Basically, there's a good bit going on with the data (especially if you've versioned your geodatabase) that the RDBMS doesn't know about. This can pose problems for replication, backup, security, failover and a host of other issues. Most of these can be addressed by adhering to ESRI's system design white paper as well as the implementation of some (good) third-party tools.</p>

<p>Before I get too far down this road, let me re-iterate that ArcSDE will support PostgreSQL at 9.3 and that's good. I imagine it'll look a lot like current ArcSDE but with PG on the back end. That's fine and understandable so let me offer up one man's opinion on what ESRI should do with ArcSDE at 10.x.</p>

<p>I think the middleware (giomgr, etc.) needs to go. All of what ArcSDE currently does can and should be pushed completely into the RDBMS. All of the platforms currently supported by ArcSDE, as well as PostgreSQL, can support this. The way I see it, this can be accomplished in two basic ways.</p>

<ol>
<li><p>Slay the beast - This is the more drastic and, IMO, the least preferable but I'll deal with it first. This approach would boil down to recognition that each of the database platforms supported by ArcSDE (including <a href="http://www.directionsmag.com/editorials.php?article_id=2477">SQL Server 2008</a>, which will be out by the time ArcGIS 10 is) has some form of embedded spatial support and ArcGIS will simply support each of those capabilities, essentially getting out of the spatial data management business. This would lead to issues of consistency across platforms (spatial indexing, query languages, support for partitioning, etc.) and also probably mean a reduction in capability when you consider versioning, feature data sets, raster support and many other features of an ArcSDE geodatabase. Ultimately, I think this approach would be the least desirable for the ESRI user community.</p></li>
<li><p>Push it down - This approach is, in my opinion, the logical endpoint of what ESRI has already started with the implementation of st_geometry. It is the creation of spatial data types and associated behaviors at the database level. Again, all of the platforms currently supported by ArcSDE can handle this as evidenced by the existence of spatial extensions (and the <a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=MsSqlSpatial">MsSqlSpatial</a> open-source project for SQL 2005). This wasn't necessarily true when SDE was first introduced so the middleware approach made sense. So I think ESRI should aggressively push all of the capability of ArcSDE down to the database level where it ultimately belongs. This would address a couple of traditionally nagging issues:</p></li>
</ol>


<ul>
    <li>Security - Security would be completely handled at the RDBMS level using the native security model of the RDBMS. In addition, there would be no need for a separate ArcSDE service that needs to connect via an 'sde' user. This has always caused problems for us, especially in shops where passwords must be changed periodically. In addition, it would eliminate the need to use port 5151. For MS SQL Server, it should be straightforward to implement Windows integrated authentication. It possible now but not terribly easy and we are constantly having tweak it whenever a new sysadmin comes along.</li>

    <li>Administration - By and large, your DBAs could handle most of the day-to-day admin. Native replication, backup and recovery tools should work also. In addition, it should be easier to set up failover and native clustering should work as well. By pushing everything down, the need for third-party tools to handle a lot these functions should go away (but they'll stay around in general because the RDBMS tools aren't always great).</li>
</ul>


<p>So why not just support the native spatial extensions rather than create new ones? I see consistency being one primary reason. Essentially, ESRI could implement their own spatial objects and methods in a manner so that behaviors are consistent across platform. In addition, capability would also be consistent, especially in the area of raster handling but also in terms of versioning, topology, etc. It probably would only have partial benefit with regard to SQL since each platform's flavor of SQL is different (but that's getting better). Where it would benefit at the SQL level would be having all of the spatial functions with consistent calls and signatures.</p>

<p>This approach would also isolate the spatial data management into the data tier, making easier to support n-tier systems and SOA. From an application perspective, there's no reason why ESRI can't wrap ArcObjects around it to make transparent to an application developer. I could go on and on...</p>

<p>There are a lot of questions one could raise: Would it be an OGC compliant implementation? Would it be an "embrace and extend" approach where it's an OGC compliant implementation extended to support all of the additional features of a geodatabase? Would it be completely proprietary? The answers to all of those would have to be left up to ESRI. For me, it ulimately comes down to the fact that ArcSDE needs to change. The middleware needs to go away and the capability needs to be pushed to the RDBMS level. I don't think it's a particularly revolutionary thought, but thought I'd add it to the pile just in case pile has any bearing. Maybe that's what they've got planned for 10.x and st_geometry et. al. is just the first hint. If so, count me as a yes vote. If not, I'd encourage them to plot a new course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bringing It All Together...]]></title>
    <link href="http://blog.geomusings.com/2007/06/26/Bringing-It-All-Together/"/>
    <updated>2007-06-26T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2007/06/26/Bringing-It-All-Together</id>
    <content type="html"><![CDATA[<p>These are pretty fun times to be working in GIS. There's an explosion of new technologies across the whole spectrum and integration possibilities are seemingly boundless. Back when I got started, <a href="http://www.esri.com">ESRI</a> and <a href="http://www.intergraph.com">Intergaph</a> were duking it out and others, like <a href="http://www.mapinfo.com">MapInfo</a>, were out there on the periphery also. <a href="http://grass.itc.it/">GRASS</a> was flying the OS banner and there were a few good free tools, such as the various ones put out by <a href="http://en.wikipedia.org/wiki/Sol_Katz">Sol Katz</a> at the <a href="http://www.blm.gov/wo/st/en.html">BLM</a>.</p>

<p>Everything quieted down for a few years but there's been a flowering of new technologies (well-documented elsewhere) over the last couple of years in both the commercial and open-source communities. I am particularly impressed with the pace at which the open-source community has ramped up with tools of strong quality and capability. In addition, the back-and-forth between <a href="http://earth.google.com/">Google</a> and <a href="http://www.microsoft.com/virtualearth/default.mspx">Microsoft</a> has put better tools in the hands of the average consumer. That doesn't come without drawbacks, but I see it as a net positive.</p>

<p>What I find interesting about all of this activity is that it demonstrates that the closed/commerical/competitive approach can bear fruit and so can the open-source/free/collaborative approach. Where you fall in the spectrum between the two is totally up to you but no one can offer up any concrete evidence that one is vastly superior to the other at this point. In addition, it's becoming increasingly clear that they don't have to be mutually exclusive.</p>

<p>When you throw in <a href="http://www.opengeospatial.org">OGC</a> standards and well as <em>de facto</em> standards such as <a href="http://code.google.com/apis/kml/documentation/">KML</a>, it becomes quite possible to stitch together technologies of various parentage effectively. I offer up the following as a concrete example:</p>

<p><a href="http://geobabble.files.wordpress.com/2007/06/os_free_commercial.png" title="Click to enlarge..."><img src="http://geobabble.files.wordpress.com/2007/06/os_free_commercial.thumbnail.png" /></a></p>

<p>This screenshot depicts a map (no, it's not pretty but blame that on me) that was assembled using several technologies. The application is obviously <a href="http://www.esri.com/software/arcgis/about/desktop_gis.html">ArcMap</a>. Working from the bottom up, the layers are:</p>

<ul>
    <li>Counties - US Counties residing in <a href="http://www.esri.com/software/arcgis/arcsde/">ArcSDE</a> and <a href="http://www.microsoft.com/sql/default.mspx">SQL Server</a></li>
    <li>State Boundaries - US States loaded directly from a local install of <a href="http://postgis.refractions.net/">PostGIS</a> using the <a href="http://code.google.com/p/ziggis/">zigGIS</a> connector</li>
    <li>Major Water - A shapefile on the local hard drive</li>
    <li>Hospitals - A <a href="http://www.opengeospatial.org/standards/wfs">WFS</a> layer being served from my <a href="http://geoserver.org/">GeoServer</a> <a href="http://geobabble.wordpress.com/2007/06/19/my-little-open-source-stack/">instance</a> and loaded into ArcMap with the help of the free <a href="http://www.thecarbonproject.com/carbonarc.php">CarbonArc Lite</a> extension from the <a href="http://www.thecarbonproject.com">Carbon Project</a>. Behind Geoserver, the data sits in PostGIS.</li>
</ul>


<p>So we have commercially licensed software (ArcMap, ArcSDE, SQL Server), freeware (CarbonArc Lite) and open-source software (zigGIS, PostGIS, GeoServer, <a href="http://www.postgresql.org/">PostgreSQL</a>) working together to make this product. All are good tools that, working together, bolster each others' shortcomings. This kind of thing demostrates the "best-of-breed" (hate that term) concept very well.</p>

<p>A few months back, <a href="http://www.paolocorti.net/public/wordpress/index.php/2007/01/19/full-oss-solution-vs-osscommercial-solution-mix/">Paolo posted</a> about mixing commercial and open-source tools. I think this will eventually be the prevalent means of doing business.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving Forward On A Couple of Fronts]]></title>
    <link href="http://blog.geomusings.com/2007/04/24/Moving-Forward-On-A-Couple-of-Fronts/"/>
    <updated>2007-04-24T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2007/04/24/Moving-Forward-On-A-Couple-of-Fronts</id>
    <content type="html"><![CDATA[<p>Well, it's been a while since I've posted anything technical. Work has been a little crazy and I'm not willing to carve into time with the family to keep other stuff moving. As a result a few things have been sitting for a while but I've been able to get around to two things.</p>

<p>First, I've been playing with making a <a href="http://msdn2.microsoft.com/en-us/netframework/aa663324.aspx">WCF</a> web service that wraps spatial calls to <a href="http://postgis.refractions.net/">PostGIS</a>. The first thing I'm building is a call to do a coordinate transformation. Fairly simple stuff. This is actually my standard "getting my feet wet" task. I have written the same thing over the years in MapObjects, ArcObjects, ArcGIS Server, COM, Java, VB.NET, C#...you name it. Now, it's my guinea pig for WCF.</p>

<p>WCF changes the way web services are done in .NET. Given the larger focus on support SOA with .NET 3.0, the changes make sense. Overall, I think SOA in general will be easier in 3.0 but web services in particular are not as simple to implement as in 2.0. That's an overall change for the better IMO but it takes some getting used to. I've pretty much got it working on the service side but my client code is still having trouble. Once I get it ironed out, I plan to post what I did and discuss some of the issues.</p>

<p>Secondly, I'm picking back up with building ArcCatalog objects for <a href="http://code.google.com/p/ziggis">ZigGIS</a>. I'm trying to follow the model <a href="http://www.esri.com">ESRI</a> established with how to manage connections to ArcSDE in ArcCatalog. I've gotten far enough that I have a connection dialog that will write out a .zig file. The next step is to iterate the .zig files and list them as nodes in the ArcCatalog tree. More on that as I move along, also.</p>

<p>So the purpose of this post is really more to stick my head out and say "I'm still here." There, I've said it. More again soon...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Almost There with 9.2]]></title>
    <link href="http://blog.geomusings.com/2007/03/09/Almost-There-with-9.2/"/>
    <updated>2007-03-09T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2007/03/09/Almost-There-with-9.2</id>
    <content type="html"><![CDATA[<p>Okay, I have no one to blame but myself. I have Desktop and the full EDN kit (except for ArcIMS) installed. Therefore, I've uninistalled everything 9.1 and reinstalled everything 9.2 and now I get to do the service packs. One day, I'll get back to coding, I'm sure.</p>

<p>Meanwhile, the front of my forehead keeps getting flatter from banging it on the desk...</p>
]]></content>
  </entry>
  
</feed>
