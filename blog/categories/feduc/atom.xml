<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FedUC | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/feduc/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2012-12-17T11:42:00-05:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Browsing WeoGeo Market Using the ESRI Silverlight API]]></title>
    <link href="http://blog.geomusings.com/2010/02/25/Browsing-WeoGeo-Market-Using-the-ESRI-Silverlight-API/"/>
    <updated>2010-02-25T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2010/02/25/Browsing-WeoGeo-Market-Using-the-ESRI-Silverlight-API</id>
    <content type="html"><![CDATA[<p><strong>Updated: </strong> This demo application now running <a href="http://demo.zekiah.com/weosilverlight">here</a>. I will update this demo periodically, as time permits, so keep checking back.</p>

<p>At the <a href="http://www.esri.com/events/feduc/index.html">2010 ESRI Federal User Conference</a>, <a href="http://www.weogeo.com">WeoGeo</a> announced the availability of <a href="http://blogs.weogeo.com/jamesfee/2010/02/16/introducing-weogeo-tools-for-arcgis/">a toolbar for interacting with WeoGeo Market and private libraries from within ArcMap</a>. This, combined with Dan Dye?s <a href="http://blogs.weogeo.com/dandye/2010/01/07/weogeo-api-python-examples-part-1/">series of posts</a> showing how to use the <a href="http://wiki.weogeo.com/index.php/Developer:_API">WeoGeo REST API</a> with Python got me thinking about how easy it would be to integrate with ESRI?s clients for the ArcGIS Server REST API. All of my clients (it seems) are using the <a href="http://resources.esri.com/arcgisserver/apis/silverlight/">Silverlight API</a> these days so I am spending a lot of time with it and decided to use it as my testbed.</p>

<p>My goal was simple, I wanted to browse the <a href="http://www.weogeo.com/market">WeoGeo Market</a> for any data sets in the current map extent, be able to select one from a list, and have its preview image display in the proper location on my Silverlight map.<!--more--></p>

<p>WeoGeo provides the tools needed to store spatial data online, in the cloud, and sell/disseminate it from there. It gives a user the ability choose options such as spatial reference, data format, geographic extent and other such parameters when they download. If you are a data provider that is selling data, WeoGeo can host it and handle the sales transaction for you. WeoGeo has more advanced data management capabilities as well but they are beyond the scope of this post, although I may delve into them in future posts.</p>

<p>You can find and order data from WeoGeo completely online via their web site but, as the toolbar demonstrates, the WeoGeo API enables integration into the environment in which you work. A key part of the WeoGeo process is the ability to preview data sets to ensure that they are what you need. WeoGeo provides low-resolution KML images as well as other preview images to accomplish this via the web site. Those preview images are also exposed via the WeoGeo API. I decided to hook into the PNG images that are normally delivered via KML.</p>

<p>The <a href="http://wiki.weogeo.com/index.php/Datasets_API">WeoGeo datasets API</a> provides the means to browse data that is available within a geographic extent. This is accomplished through a GET request described <a href="http://wiki.weogeo.com/index.php/Datasets_API#List_Datasets">here</a>. There are many parameters available to allow you to filter data sets but I stuck with the standard parameters this time around. The response depends on what you ask for. GET /datasets.weo will return WeoGeo?s XML document, or <a href="http://wiki.weogeo.com/index.php/Developer:_WeoFile">weo file</a>. GET /datasets.json will return a JSON formatted listing. For this attempt, I went with JSON.</p>

<p>The call returns a list of data sets. The JSON for a single data set looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="s2">&quot;votes&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;royalty_model&quot;</span><span class="o">:</span> <span class="s2">&quot;UNCREDITED&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;rating&quot;</span><span class="o">:</span> <span class="mf">0.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;provider_discount_expire_option&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;permalink&quot;</span><span class="o">:</span> <span class="s2">&quot;spatialed_sample_sql_server_data&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Sample SQL Server Data&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;step_kamap&quot;</span><span class="o">:</span> <span class="mf">0.0717937948</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;spatial_resolution_in_meters&quot;</span><span class="o">:</span> <span class="mf">3233.80355656636</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;user&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;votes&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;rating&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s2">&quot;spatialed&quot;</span><span class="p">},</span>
</span><span class='line'><span class="s2">&quot;center_lat&quot;</span><span class="o">:</span> <span class="mf">45.16073438845</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;west_kamap&quot;</span><span class="o">:</span> <span class="o">-</span><span class="mf">179.1333928049</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;south_kamap&quot;</span><span class="o">:</span> <span class="o">-</span><span class="mf">134.2235717723</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;number_of_layers&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;uncompressed_misc_files_size&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;37a39b7d-af4e-d55d-9aa6-1aaff9353594&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;north_kamap&quot;</span><span class="o">:</span> <span class="mf">224.6980287277</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;center_long&quot;</span><span class="o">:</span> <span class="mf">0.3283989648</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;layers&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Layer_1&quot;</span><span class="p">,</span> <span class="s2">&quot;Layer_2&quot;</span><span class="p">,</span> <span class="s2">&quot;Layer_3&quot;</span><span class="p">],</span>
</span><span class='line'><span class="s2">&quot;data_type&quot;</span><span class="o">:</span> <span class="s2">&quot;OTHER&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;data_created_on&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;from_appliance?&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;provider_discount_expires_at&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;primary_tag&quot;</span><span class="o">:</span> <span class="s2">&quot;SQL&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;south&quot;</span><span class="o">:</span> <span class="mf">18.9234204317</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;projection&quot;</span><span class="o">:</span> <span class="s2">&quot;GEO&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;market&quot;</span><span class="o">:</span> <span class="s2">&quot;Complete&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;file_format&quot;</span><span class="o">:</span> <span class="s2">&quot;GeoTIFF&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;east_kamap&quot;</span><span class="o">:</span> <span class="mf">179.7882076951</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;datum&quot;</span><span class="o">:</span> <span class="s2">&quot;WGS84&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;children_count&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;uploaded_at&quot;</span><span class="o">:</span> <span class="s2">&quot;2009/06/01 22:23:52 -0400&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;uncompressed_data_files_size&quot;</span><span class="o">:</span> <span class="mi">75000770</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;provider_discount_rate&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;price_type&quot;</span><span class="o">:</span> <span class="s2">&quot;FIXED&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;parents_count&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;north&quot;</span><span class="o">:</span> <span class="mf">71.3980483452</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;max_price&quot;</span><span class="o">:</span> <span class="mf">5.04</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;y_conv&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0000000000&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;west&quot;</span><span class="o">:</span> <span class="o">-</span><span class="mf">179.1333928049</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;\u003Cp\u003ESQL Server 2008 Spatial data for the United States. The data is supplied as a zipped SQL Server Backup file (Sample_USA.bak.zip) and contains the following tables:\u003C/p\u003E\r\n\u003Cbr\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EUS Counties \u003Ci\u003E[polygons]\u003C/i\u003E\u003C/li\u003E\r\n\u003Cli\u003EUS States \u003Ci\u003E[polygons]\u003C/i\u003E\u003C/li\u003E\r\n\u003Cli\u003EUS Zipcodes \u003Ci\u003E[polygons]\u003C/i\u003E\u003C/li\u003E\r\n\u003Cli\u003EUS CensusBlockGroups \u003Ci\u003E[polygons]\u003C/i\u003E\u003C/li\u003E\r\n\u003Cli\u003EUS GeoNames \u003Ci\u003E[points]\u003C/i\u003E\u003C/li\u003E\r\n\u003Cli\u003EUS Highways \u003Ci\u003E[linestrings]\u003C/i\u003E\u003C/li\u003E\r\n\u003C/ul\u003E\r\n\u003Cp\u003EEach table contains a column of type geometry (geom) and a column of type geography (geog).  The geom column is in a spherical Albers Equal Area projection (the sphere is WGS 84 Authalic, the units are in meters ).  The geog column is in WGS 84 ellipsoidal coordinates.\u003C/p\u003E\r\n  \r\n  &quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;x_conv&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0000000000&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;Approved&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;spatial_resolution&quot;</span><span class="o">:</span> <span class="mf">0.04114097905</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;scales&quot;</span><span class="o">:</span> <span class="s2">&quot;357765655;205940642;118545611;68238409;39280075;22610789&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;provider_min_margin&quot;</span><span class="o">:</span> <span class="mf">0.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;hosted&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;east&quot;</span><span class="o">:</span> <span class="mf">179.7901907345</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;provider_max_discount&quot;</span><span class="o">:</span> <span class="mf">0.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;provider_margin&quot;</span><span class="o">:</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>From this, I can parse anything I need to know about the data set. In order to handle this, I created a class in C# that can deserialize this JSON into a .Net object. A snippet of that class is here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">DataContract</span><span class="p">()]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BrowseDataset</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;token&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;name&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;description&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;north_kamap&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">North</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;south_kamap&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">South</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;east_kamap&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">East</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;west_kamap&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">West</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;data_type&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">DataType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;file_format&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Format</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;data_created_on&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CreateDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;provider_margin&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">FullPrice</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;hosted&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Hosted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;projection&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Projection</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;datum&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Datum</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;center_lat&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">Latitude</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;center_long&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">Longitude</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;children_count&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Children</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;parents_count&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">Parents</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember(Name = &quot;user&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">BrowseUser</span> <span class="n">User</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As can be seen, I used DataContract and DataMember attributes to map the JSON values to properties. I also simplified the property names. If you take the time to compare, you?ll notice that I don?t handle all of the information. The dataset JSON contains more information than I needed for simply browsing so I am filtering out some of it. This doesn?t reduce traffic across the wire but does cut down on memory usage in my Silverlight client.</p>

<p>For my purposes, I decided to extend the ESRI WMS sample for the Silverlight API. I chose this mainly because I am working in it at the moment for another project. To that UI, I added a button that will fetch a WeoGeo dataset listing for my current map extent.</p>

<p><img alt="" height="85" src="http://geobabble.files.wordpress.com/2010/02/fetch_button.png" title="Button and list box for fetching/displaying data sets." width="165" /></p>

<p>When that button is clicked, this event handler is fired:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">private</span> <span class="k">void</span> <span class="n">btnFetch_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">weo</span><span class="p">.</span><span class="n">ProxyUrl</span> <span class="p">=</span> <span class="n">PrefixProxy</span><span class="p">(</span><span class="s">&quot;http://xxxx&quot;</span><span class="p">).</span><span class="n">AbsoluteUri</span><span class="p">;</span>
</span><span class='line'>        <span class="n">weo</span><span class="p">.</span><span class="n">BrowseDatasetCompleted</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">BrowseDatasetCompletedHandler</span><span class="p">(</span><span class="n">weo_BrowseDatasetCompleted</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ESRI</span><span class="p">.</span><span class="n">ArcGIS</span><span class="p">.</span><span class="n">Client</span><span class="p">.</span><span class="n">Geometry</span><span class="p">.</span><span class="n">Envelope</span> <span class="n">env</span> <span class="p">=</span> <span class="n">MyMap</span><span class="p">.</span><span class="n">Extent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">weo</span><span class="p">.</span><span class="n">getDatasetList</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">env</span><span class="p">.</span><span class="n">YMax</span><span class="p">,</span> <span class="n">env</span><span class="p">.</span><span class="n">YMin</span><span class="p">,</span> <span class="n">env</span><span class="p">.</span><span class="n">XMax</span><span class="p">,</span> <span class="n">env</span><span class="p">.</span><span class="n">XMin</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>"weo" is an instance of a wrapper class I created to encapsulate to WeoGeo interaction.</p>

<p>You will notice that I set up a proxy URL. Silverlight and Flash both are designed to only call back to the server from which they are being served. Any external servers must have a crossdomain.xml file to allow calls from these clients. This means that any external server you may want to use must have one of these files in order to receive calls from Flash or Silverlight clients. Fortunately for this application, this ?security? feature can be circumvented by calling to a proxy handler back on our server which brokers requests and responses to and from external servers. The ESRI sample included a proxy handler that suited my needs so I just used that.</p>

<p>The PrefixProxy (also from the ESRI sample) method includes some Silverlight-specific code so I kept it in my Silverlight Page class. I build a dummy call using the "http://xxxx" token so that my WeoGeo wrapper class doesn?t need to be Silverlight-specific. The wrapper then replaces the token with the correct call to the WeoGeo server. The wrapper?s getDatasetList method looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">public</span> <span class="k">void</span> <span class="n">getDatasetList</span><span class="p">(</span><span class="kt">int</span> <span class="n">page</span><span class="p">,</span> <span class="kt">double</span> <span class="n">north</span><span class="p">,</span> <span class="kt">double</span> <span class="n">south</span><span class="p">,</span> <span class="kt">double</span> <span class="n">east</span><span class="p">,</span> <span class="kt">double</span> <span class="n">west</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">DownloadStringCompleted</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">DownloadStringCompletedEventHandler</span><span class="p">(</span><span class="n">request_DownloadStringCompleted</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">_datasetBrowse</span><span class="p">,</span><span class="n">_protocol</span><span class="p">,</span> <span class="n">_library</span><span class="p">,</span> <span class="n">page</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">north</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">south</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">east</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">west</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">url</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">ProxyUrl</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;http://xxxx&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//System.Windows.MessageBox.Show(url);</span>
</span><span class='line'>            <span class="n">request</span><span class="p">.</span><span class="n">DownloadStringAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">url</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">WebException</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span> <span class="c1">//handled elsewhere</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The WebClient class in Silverlight differs from the standard .Net WebClient in that it only makes asynchronous calls. So I attached a handler for the DownloadStringCompleted event. I then format the tokenized proxy URL with the correct URL to the WeoGeo Market and make the call. The _datasetBrowse variable is simply the template for the call and is defined as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="n">_datasetBrowse</span> <span class="p">=</span> <span class="s">@&quot;{0}{1}/datasets.json?page={2}&amp;amp;north={3}&amp;amp;south={4}&amp;amp;east={5}&amp;amp;west={6}&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One note about this call: WeoGeo expects the values for the extent to be in the WGS84 (EPSG:4326) spatial reference. The ESRI Silverlight API does not do coordinate transformations internally so, if your map is not in WGS84, you will need to transform your extent before making the call to the WeoGeo API. In my case, I kept my life simple by using the Blue Marble WMS service that is served by JPL and is in WGS84 (this is a great resource and <a href="http://twitter.com/JeffHarrison">@JeffHarrison</a> was dead-on for reminding me of that fact) .</p>

<p>The DownloadStringCompleted event handler looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">void</span> <span class="n">request_DownloadStringCompleted</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">DownloadStringCompletedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">string</span> <span class="n">s</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Result</span><span class="p">;</span>
</span><span class='line'>             <span class="kt">byte</span><span class="p">[]</span> <span class="n">b</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>            <span class="n">MemoryStream</span> <span class="n">st</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>            <span class="n">DataContractJsonSerializer</span> <span class="n">ds</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DataContractJsonSerializer</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">BrowseDatasets</span><span class="p">));</span>
</span><span class='line'>            <span class="n">BrowseDatasets</span> <span class="n">retval</span> <span class="p">=</span> <span class="p">(</span><span class="n">BrowseDatasets</span><span class="p">)</span><span class="n">ds</span><span class="p">.</span><span class="n">ReadObject</span><span class="p">(</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="n">BrowseDataset</span> <span class="n">d</span> <span class="k">in</span> <span class="n">retval</span><span class="p">.</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">d</span><span class="p">.</span><span class="n">Library</span> <span class="p">=</span> <span class="n">_library</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">BrowseResults</span> <span class="p">=</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>            <span class="n">BrowseDatasetCompleted</span><span class="p">(</span><span class="n">retval</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//System.Windows.MessageBox.Show(ex.ToString());</span>
</span><span class='line'>            <span class="n">BrowseDatasets</span> <span class="n">erDs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BrowseDatasets</span><span class="p">();</span>
</span><span class='line'>            <span class="n">erDs</span><span class="p">.</span><span class="n">items</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span><span class="n">BrowseDataset</span><span class="p">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>            <span class="n">BrowseDatasetCompleted</span><span class="p">(</span><span class="n">erDs</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In essence, it takes the JSON response, deserializes it into a list of BrowseDataset objects and then raises the wrapper?s BrowseDatasetCompleted event to pass the object back to the Silverlight application. In this case, an exception produces an empty list.</p>

<p>Back in the Silverlight application, the BrowseDatasetCompleted event handler looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">void</span> <span class="n">weo_BrowseDatasetCompleted</span><span class="p">(</span><span class="n">Weo4Net</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="n">BrowseDatasets</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">Count</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weoDatasetList</span><span class="p">.</span><span class="n">Items</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weoDatasetList</span><span class="p">.</span><span class="n">DisplayMemberPath</span> <span class="p">=</span> <span class="s">&quot;Name&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="n">BrowseDataset</span> <span class="n">bds</span> <span class="k">in</span> <span class="n">ds</span><span class="p">.</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">weoDatasetList</span><span class="p">.</span><span class="n">Items</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">bds</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weoDatasetList</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Visible</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weoDatasetList</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Collapsed</span><span class="p">;</span> <span class="c1">//hide if no data sets</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We could do anything we want here but I am simply adding the data sets to a list box so they can be selected and previewed. At this point, we are ready to put some stuff on the map.</p>

<p>The ESRI Silverlight API provides a layer class called an ElementLayer. This gives you the ability to add one or more UIElement objects to the map to get a very interactive UI. In Silverlight, if you can see it, it?s probably a UIElement so this is how you can add buttons, media, pictures, etc. onto your map. I used an ElementLayer to display the preview images from WeoGeo.</p>

<p>Each BrowseDataset object contains the North, South, East and West properties that define the geographic extent of the data and, thus, the preview image. When the user selects a dataset in the list, I use this information to add an Image element to the layer and define where it should be displayed. That is all handled in the list?s SelectionChanged event handler like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">private</span> <span class="k">void</span> <span class="n">weoDatasetList_SelectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SelectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ElementLayer</span> <span class="n">elyr</span> <span class="p">=</span> <span class="n">MyMap</span><span class="p">.</span><span class="n">Layers</span><span class="p">[</span><span class="s">&quot;weoPreviewLayer&quot;</span><span class="p">]</span> <span class="k">as</span> <span class="n">ElementLayer</span><span class="p">;</span>
</span><span class='line'>        <span class="n">BrowseDataset</span> <span class="n">ds</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">weoDatasetList</span><span class="p">.</span><span class="n">SelectedItem</span> <span class="k">as</span> <span class="n">BrowseDataset</span><span class="p">;</span>
</span><span class='line'>        <span class="n">elyr</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span> <span class="c1">//clear any previous previews</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;http://weodata.weogeo.com/dataset_tiles/{0}/kml.png&quot;</span><span class="p">,</span> <span class="n">ds</span><span class="p">.</span><span class="n">Token</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Image</span> <span class="n">img</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Image</span><span class="p">();</span>
</span><span class='line'>        <span class="n">BitmapImage</span> <span class="n">bmi</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BitmapImage</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">url</span><span class="p">));</span>
</span><span class='line'>        <span class="n">img</span><span class="p">.</span><span class="n">Source</span> <span class="p">=</span> <span class="n">bmi</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//set the ElementLayer.Envelope attribute of the Image</span>
</span><span class='line'>        <span class="n">ESRI</span><span class="p">.</span><span class="n">ArcGIS</span><span class="p">.</span><span class="n">Client</span><span class="p">.</span><span class="n">Geometry</span><span class="p">.</span><span class="n">Envelope</span> <span class="n">env</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ESRI</span><span class="p">.</span><span class="n">ArcGIS</span><span class="p">.</span><span class="n">Client</span><span class="p">.</span><span class="n">Geometry</span><span class="p">.</span><span class="n">Envelope</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">East</span><span class="p">,</span> <span class="n">ds</span><span class="p">.</span><span class="n">South</span><span class="p">,</span> <span class="n">ds</span><span class="p">.</span><span class="n">West</span><span class="p">,</span> <span class="n">ds</span><span class="p">.</span><span class="n">North</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ElementLayer</span><span class="p">.</span><span class="n">SetEnvelope</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'>        <span class="n">elyr</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As can be seen, this is designed to display one preview at a time. The main trick here is that the ElementLayer class defines an attached property called ?Envelope? to define the geographic extent of the UIEelement. In XAML, it would look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>Image Stretch=&quot;Fill&quot; Source=&quot;http://weodata.weogeo.com/dataset_tiles/fc69c451-4714-8250-90d4-91b74528127e/kml.png&quot; esri:ElementLayer.Envelope=&quot;-78.0496954009,34.9499119752,-71.9494760266,40.0496953721&quot; /<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In code, you use the static ElementLayer.SetEnvelope method to set this value for your UIElement. With that, you can now pan/zoom to an extent that you want, click a button to fetch a dataset listing, and select select individual datasets in the list to see the preview images.</p>

<p>I'll probably continue to explore the WeoGeo API with this application over time but this is my first pass. <a href="http://demo.zekiah.com/weosilverlight">I have it running on one of our servers</a> to play with but here is a screen capture:</p>

<p><a href="http://geobabble.files.wordpress.com/2010/02/weo_silverlight.png"><img alt="" class="alignnone size-medium wp-image-823" height="168" src="http://geobabble.files.wordpress.com/2010/02/weo_silverlight.png?w=300" title="ESRI SilverLight API showing Landsat preview image for a Tampa dataset." width="300" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FedUC Plenary - 47.53]]></title>
    <link href="http://blog.geomusings.com/2008/03/25/FedUC-Plenary-4753/"/>
    <updated>2008-03-25T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2008/03/25/FedUC-Plenary-4753</id>
    <content type="html"><![CDATA[<p>For those of you keeping track at home, the reference to <a href="http://www.openlayers.org/">OpenLayers</a> in <a href="http://www.esri.com/news/podcasts/audio/speaker/feduc08_dangermond.mp3">Jack Dangermond's FedUC plenary talk</a> comes at approximately 47:53.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on the FedUC]]></title>
    <link href="http://blog.geomusings.com/2008/02/22/Thoughts-on-the-FedUC/"/>
    <updated>2008-02-22T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2008/02/22/Thoughts-on-the-FedUC</id>
    <content type="html"><![CDATA[<p>I didn't go to the FedUC today. I haven't been staying in the city but have rather been commuting in each day. The weather is rather nasty so I decided to forego the rousing sendoff. I can handle snow and I can handle rain but I want nothing to do with ice.</p>

<p><img alt="Yuck! I?m not going anywhere near that!" src="http://geobabble.files.wordpress.com/2008/02/dc_ice.png" />
<em>Boat drinks! Boys in the band ordered boat drinks!</em></p>

<p>So I thought I'd do a little summation of yesterday. I did a brief mention of the exhibit hall yesterday and I don't have much to add to that other than the fact that it was interesting to see both Google and Microsoft with booths for GE and VE respectively. That definitely reinforced the direction outlined in Jack's talk on Wendesday. I spent most of the day in either paper sessions or meetings. From a business standpoint, it was very fast-paced and was a valuable day. I didn't get to any technical workshops (sorry, Kurt, I dropped the ball on your IEditor question) but <a href="http://surveying-mapping-gis.blogspot.com/2008/02/esri-feduc-day-2-sort-of.html">Dave did</a> so maybe he'll delve into that more.</p>

<p>The FedUC is much more compact that the UC and differently focused than the dev summit so the technical workshop offerings were not as deep as they are at those venues. Also, the actual development teams were not really present in the way that they are at those other events. The FedUC is much more focused on solutions and applications of ESRI software to government so it was great from that standpoint but hardcore nuts and bolts issues are probably better addressed at the dev summit.</p>

<p>One of the more unsettling aspects of the FedUC was seeing all the ESRI staff in suits. It was the first ESRI event I've ever been to where I felt underdressed on the first day. But it was DC, not Southern California.</p>

<p>The general approach to the paper sessions was solutions-based. It was usually either a government user or business partner or both describing solutions implemented with ESRI software. One thing that was nice is that everyone seemed pretty comfortable sharing the "warts" so there were a lot of good lessons learned in each paper session. It was a good way to get some real-world data. For me, it was also valuable to implementations that solved different problems. I know I can get pretty focused on what I'm doing so it's nice to come up for air.</p>

<p>According one ESRI staffer I was talking to, they had about 2600 attendees registered and maybe as many 400 walk-ins. That's significantly larger than previous FedUC's. Most of the paper sessions I was in were well-attended. This year may have been the tipping point for the FedUC. ESRI may have finally found the right tone for the event.</p>

<p>The social at the National Geographic building was nice. The open bar was nice touch, too. ;)  I saw lots of people I haven't seen in a long time and got you meet a quite a few that I have been wanting to meet. By then, the ESRI staff were letting their hair down so the atmosphere was more relaxed. Thursday was a very intense day for most everyone I talked to, with a lot being crammed into the day. That may have been exacerbated by the fact that the Friday weather was supposed to be bad and a lot of people were planning on not going on Friday. Either way, the social was very relaxed and was a good time.</p>

<p>I said at the outset that I wear a few hats at work. If I had to leave one at home for the FedUC, it would be my developer hat but I found the conference to be very valuable from a business standpoint. I was planning on going to the dev summit but it looks like that may be falling through so next up (in the ESRI world, anyway) will be San Diego for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FedUC - From the Exhibit Hall]]></title>
    <link href="http://blog.geomusings.com/2008/02/21/FedUC-From-the-Exhibit-Hall/"/>
    <updated>2008-02-21T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2008/02/21/FedUC-From-the-Exhibit-Hall</id>
    <content type="html"><![CDATA[<p>Most of the usual suspects were there today but there was very little that was new or exciting. The system integrator community was well represented as well as several relevant government agencies such as USGS, NGA, BLM, etc. There was a good cross-section of government support, including land managment, environment and others. In other words, it wasn't as dominated by homeland security types as it has been in recent years. One thing that did impress me was the <a href="http://www.pbsj.com/what/Core/HDSurvey/index.asp">high-definition surveying</a> from <a href="http://www.pbsj.com">PBS&amp;J</a>. They had a sensor running and surveyed the exhibit hall pretty fast and they seem to be able to turn around good GIS and CAD data pretty fast. Beyond that, I had seen most of what was being exhibited before.</p>

<p>I continue to be impressed by the depth of the content of the paper sessions. I can honestly say that this is the first FedUC where I felt like I couldn't get to everything I wanted to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More From the FedUC Plenary]]></title>
    <link href="http://blog.geomusings.com/2008/02/20/More-From-the-FedUC-Plenary/"/>
    <updated>2008-02-20T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2008/02/20/More-From-the-FedUC-Plenary</id>
    <content type="html"><![CDATA[<p><img alt="feduc2008.png" src="http://geobabble.files.wordpress.com/2008/02/feduc2008.png" /></p>

<p>I want to focus a little more on some of the demos and also how ESRI is positioning the ArcGIS platform to support the "GeoWeb" implementation pattern. Jack identified four "implementation patterns" that defin typical GIS architectures. The first three are pretty standard: single user desktop, multi-user server, and "federated" (an ESB-type implementation). The last one is what he called the "GeoWeb". That was depicted as a set of services (data, analysis and otherwise) that can be used by various types of clients included, desktop, web, globes, mobile and pretty much anything else. This is perhaps most effectively visualized as a "mashup" type of situation. This seems to intersect nicely with the realm of "neogeography" in concept.<!--more--></p>

<p>Jack painted a picture of the ArcGIS platform supporting this by providing the ability, via ArcGIS Server, to serve out models and analysis as well as just data. So you could have a service that runs a service-area analysis based upon inputs from a client. Essentially, apps/services like Virtual Earth, Google Earth, Google Maps, OpenLayers, etc. provide an effective basemap for visualization so the role that AGS can play in that is to serve specific data/models/results from "authoritative sources", thereby exposing more advanced processes in a way that they can executed and their results visualized through clients such a those just mentioned.</p>

<p>This makes sense to me because ESRI's products do have a lot of analytical capability embedded in them. I think ESRI would waste a lot of resource trying to compete in the visualization area since that's been effectively sewn up by others. What they can bring to the game is a robust set of spatial methods that can be exposed as services. It's a "play to your strengths" strategy.</p>

<p>This idea was illustrated effectively with a few demos. Of course, demos are demos so we'll have to wait to see how well it really works but I'll describe the demos. First was demo of ArcGIS Explorer build 450 loading data from various sources (ArcIMS, AGS, WMS, KML, file geodatabase). The performance with ArcIMS layers seems greatly improved and you now have the ability to pull in sublayers from an ArcIMS service and symbolize them however you want, which is nice. So AGX reads a lot of different data, big deal. Next they demonstrated a custom task that called a model on AGS and ran a drive-time analysis using a placemarker in AGX. It returned the expected polygons and symbolized them nicely. So, we learned that AGX can talk to AGS. Again, big deal.</p>

<p>Next came the Google Earth demo where a similar placemarker was created in GE and used to call the same AGS model. It returned the result in nicely symbolized KML. That was good to see. From there the demos jump into the new javascript API. In Google Maps, the javascript API was used to display apartment locations from Craig's List and then call an AGS-hosted proximity model that identified the best place park to optimize your apartment search. So locations from one (non-ESRI) server were fed to AGS for analysis. Lastly, a Virtual Earth app (using the javascript API) was created before our eyes that embedded a call to and AGS-hosted Spatial Analyst tool to identify areas of higher solar radiation for optimal solar panel placement. This result was rendered in 3D using VE. That was all very impressive, especially the re-use of services that were supporting multiple clients (ESRI and otherwise).</p>

<p>So the take away was "we've got the server to crunch your data and give you good analysis results, display it any way you want." There was no OpenLayers demo but it was mentioned several times and something that should be able to leverage new APIs. There were no demos of the REST API, BTW.</p>

<p>So, I can see and understand how they are positioning ArcGIS to play in a "neogeography" world. It will be interesting to see how it really works as 9.3 gets closer to release. I will venture a very safe guess that it won't be all the way there yet but the battleship seems to be coming about more and possibly gaining momentum.</p>

<p>So I saw a lot of demos that worked really well. That's not a huge surprise but it did make me want to get stuff in my hands and try to break it. ;)  Overall, I think I like this direction and things look promising so far.</p>
]]></content>
  </entry>
  
</feed>
