<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Data | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/open-data/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2013-11-19T09:33:36-05:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prying Data Open]]></title>
    <link href="http://blog.geomusings.com/2011/08/30/prying-data-open/"/>
    <updated>2011-08-30T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2011/08/30/prying-data-open</id>
    <content type="html"><![CDATA[<p>In the aftermath of Hurricane Irene, I was trying to get information from my <a href="http://www.smeco.coop">local electric cooperative</a> about outages. There were many (including my neighborhood) and I wanted to see the scale of the problem. It turns out, they have a page with a map that shows current outages by zip code.</p>

<div style="text-align: center;"><a href="http://geobabble.files.wordpress.com/2011/08/smeco_outage.png"><img alt="" class="size-medium wp-image-2018" height="202" src="http://geobabble.files.wordpress.com/2011/08/smeco_outage.png?w=300" title="smeco_outage" width="300" /></a><div style="text-align: center; font-size: 14px">Old school outage map<br /></div></div>


<p>It's pretty old-school as far as web maps go but it gets the job done. Their day job is making electricity, not web maps, so I won't critique it too much. One thing I did notice is that the map seems to be dynamically generated (as do the tables on the page) from some inaccessible data source. I search and tried to find some kind of feed, to no avail.</p>

<!--more-->


<p>The data on this page is ideal for an RSS feed which could be consumed by any of the local news portals, online mapping sites, and other outlets that may be used by the public. Yet, there is no feed. Here is an example of useful information locked away behind an uninformed design decision. The organization has already made the decision to publish this information so using RSS or social media would not expose anything more than what is already being released.</p>

<p>It makes me wonder about the scale of this problem. How much more information is being produced in relatively inaccessible forms by otherwise well-intentioned organizations? In this case, the information is being produced as an HTML page, so we can always scrape and republish the information, which is exactly what I did. The resulting feed can be found here:</p>

<p><a href="http://demo.zekiah.com/smecofeed/smeco_outage.xml">http://demo.zekiah.com/smecofeed/smeco_outage.xml</a></p>

<p>The feed is simple: the ZIP code is in the item title and the number households affected is in the item description (by itself with no other decoration). Since ZIP codes are fairly standard, it makes it easy to consume the feed and do other things with it, such as <a href="http://geocommons.com/maps/97440">map it on GeoCommons</a>. This map may seem redundant but now the data can be layered with other data sets such as shelter locations, ice distribution centers and the like, making it more useful.</p>

<p>To produce this feed I used Python. <a href="http://blog.davebouwman.com/">Dave Bouwman</a> pointed me to <a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> and I also made use of the <a href="http://www.crummy.com/software/ScrapeNFeed/">ScrapeNFeed</a> library (which makes use of <a href="http://www.dalkescientific.com/Python/PyRSS2Gen.html">PyRSS2Gen</a>). I have it set up on a cron job to update every two hours and dump a new XML file. I decided this was preferable to doing a direct link back to the page because I'm unsure how robust their server is. I am posting my code below in the event that someone else needs to do this. This type of approach is very fragile. You'll see from the code that it's very dependent upon the structure of the source HTML. So, if the page structure changes, the feed will break. This is obviously not ideal so it's best to view it as a band-aid.</p>

<p>I suspect that there's a lot of this kind of thing going on. Where you find it, it's best to engage with the organization to help make it better and that's my next step here. There's been a lot of talk about open data in our industry for a while, along with a lot of activity. Situations like this make me realize the scale of the work yet to be done. It will take a lot of effort to open up data all the way down the line and, perhaps, even more effort to help organizations understand why it is beneficial to do so in the first place. But it's work that needs to be done.</p>

<p>As promised, here's the Python code should anyone find it useful:</p>

<p>{% codeblock lang:python %}
from BeautifulSoup import BeautifulSoup
import re
import urllib2
from PyRSS2Gen import RSSItem, Guid
import ScrapeNFeed</p>

<p>class SmecoFeed(ScrapeNFeed.ScrapedFeed):</p>

<pre><code>    def HTML2RSS(self, headers, body):
            soup = BeautifulSoup(body)
            table = soup.findAll('table')[3]
            rows = table.findAll('tr')
            items = []
            for index in range(len(rows) - 1):
                    row = rows[index]
                    cols = row.findAll('td')
                    if len(cols) &amp;gt; 0:
                        zip = cols[0].string
                        zip = zip.replace('&amp;amp;nbsp;', '')
                        tot = cols[1].string
                        tot = tot.replace('&amp;amp;nbsp;', '')
                        #This link is not real. It will simply take you to the homepage.
                        lnk = 'http://www.smeco.coop#' + zip
                        items.append(RSSItem(title=zip,description=tot,link=lnk))
                        #print zip
                        #print tot
                        #cols = row.findAll('td')
                        #for col in cols:
                        #    print col.string
            self.addRSSItems(items)
</code></pre>

<p>SmecoFeed.load("Current SMECO outages (as scraped by Zekiah Technologies)",</p>

<pre><code>             'http://outage.smeco.coop',
             "Current SMECO power outages by ZIP code",
             'smeco_outage.xml', 
     'smeco_outage.pickle',
             managingEditor='bill@zekiah.com (Bill Dollins)')
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
