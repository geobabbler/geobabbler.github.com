<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: expression | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/expression/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2013-05-23T08:37:59-04:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DynamicLayer Auto-Refresh for ESRI Silverlight API]]></title>
    <link href="http://blog.geomusings.com/2010/11/01/dynamiclayer-auto-refresh-for-esri-silverlight-api/"/>
    <updated>2010-11-01T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2010/11/01/dynamiclayer-auto-refresh-for-esri-silverlight-api</id>
    <content type="html"><![CDATA[<p>Despite <a href="http://techcrunch.com/2010/10/30/rip-silverlight-on-the-web/">recent news regarding Silverlight</a>, I expect some of my projects to continue using it for the near term. Others may be taking the same tack, so I thought I'd go ahead and offer this up.</p>

<p>Several of the projects I support have the requirement to periodically refresh specific layers in order to track change or movement. These layers can range from weather to vehicle locations and such. I have typically accomplished this with a timer that refreshes the layer(s) on a specified interval. This can get rather cumbersome if you have different layers that require different refresh intervals.</p>

<p>Working within <a href="http://www.silverlight.net/">Silverlight</a>, I have the option of using an existing layer class as a base class and extending it to include an automatic refresh capability. However, some classes, such as the <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.html">ArcGISDynamicMapServiceLayer</a>, are sealed and cannot be extended. Luckily, the <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=d197f51a-de07-4edf-9cba-1f1b4a22110d&amp;displaylang=en">Expression Blend SDK</a> enables me to get around this by attaching a custom behavior. <!--more--></p>

<p>The ArcGISDynamicMapServiceLayer descends from the <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.DynamicLayer.html">DynamicLayer</a> inheritance hierarchy, which provides access to a <em>Refresh</em> method. So I developed the following behavior to attach to a DynamicLayer (or anything that derives from it). It makes use of a <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatchertimer.aspx">DispatcherTimer</a> to refresh the layer to which it is attached. In this particular implementation, each layer gets its own timer. That met my requirement of having different refresh rates for different layers. It may be preferable in some instances to pass in a reference to a single timer to control all layers. In either case, you can simply attach the behavior only to those layers that you need to refresh. This can get you around iterating the map's <em>Layers</em> collection at each timer tick (or other such approaches).</p>

<p>This is the code for the behavior itself. Scroll down for a snippet showing how to implement it.</p>

<p>{% codeblock lang:csharp %}
/*Copyright (c) 2010, Zekiah Technologies, Inc.
All rights reserved.</p>

<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>

<p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of the Zekiah Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/</p>

<p>using System;
using System.Windows.Input;
using System.Windows.Interactivity;
using System.Windows.Threading;
using ESRI.ArcGIS.Client;
using ESRI.ArcGIS.Client.Geometry;
using System.Windows;</p>

<p>namespace Zekiah.ArcGIS.Behaviors
{</p>

<pre><code>/// &amp;lt;summary&amp;gt;
/// Adds automatic refresh to a DynamicLayer object (or any
/// class that inherits from DynamicLayer. 
/// &amp;lt;/summary&amp;gt;
public class AutoRefresh : Behavior&amp;lt;DynamicLayer&amp;gt;
{
     private DispatcherTimer _tmr = null;

    /// &amp;lt;summary&amp;gt;
    /// Called after the behavior is attached to an AssociatedObject.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;remarks&amp;gt;Override this to hook up functionality to the AssociatedObject.&amp;lt;/remarks&amp;gt;
    protected override void OnAttached()
    {
        base.OnAttached();

        initTimer();
    }

    public TimeSpan Interval
    {
        get
        {
            if (_tmr == null)
            {
                initTimer();
            }
            return _tmr.Interval;
        }
        set
        {
            if (_tmr == null)
            {
                initTimer();
            }
            _tmr.Interval = value;
        }
    }

    public void Start()
    {
        if (_tmr == null)
            initTimer();
        if (!_tmr.IsEnabled)
            _tmr.Start();
    }

    public void Stop()
    {
        if ((_tmr != null) &amp;amp;&amp;amp; (_tmr.IsEnabled))
            _tmr.Stop();
    }

    /// &amp;lt;summary&amp;gt;
    /// Called when the behavior is being detached from its AssociatedObject, 
    /// but before it has actually occurred.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;remarks&amp;gt;Override this to unhook functionality from the AssociatedObject.&amp;lt;/remarks&amp;gt;
    protected override void OnDetaching()
    {
        base.OnDetaching();
        _tmr = null;
    }

    private void initTimer()
    {
        _tmr = new DispatcherTimer();
        _tmr.Interval = new TimeSpan(0, 0, 30); //default thirty second interval
        _tmr.Tick += new EventHandler(_tmr_Tick);
    }

    void _tmr_Tick(object sender, EventArgs e)
    {
        this.AssociatedObject.Refresh();
    }

 }
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The following code shows how to attach the behavior. In this case, I just kept the default 30 second interval (more than enough for this weather layer). For layers of type ArcGISDynamicMapServiceLayer, it is necessary to set <em>DisableClientCaching</em> to true or you'll never see a refresh.</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>        var lyr = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
        lyr.DisableClientCaching = true;
        lyr.Url = "http://services.nationalmap.gov/ArcGIS/rest/services/NEXRAD_Weather/MapServer";

        var autoRefresh = new Zekiah.ArcGIS.Behaviors.AutoRefresh();
        var behaviors = System.Windows.Interactivity.Interaction.GetBehaviors(lyr);
        behaviors.Add(autoRefresh);
        autoRefresh.Start();
        this.Map.Layers.Add(lyr);
</code></pre>

<p>{% endcodeblock %}</p>

<p>I've used this for both ArcGIS Server dynamic layers as well as WMS layers so far. I also have a version that attached to GraphicsLayer objects so that I can refresh GeoRSS layers. So far this technique has worked pretty well for me.</p>
]]></content>
  </entry>
  
</feed>
