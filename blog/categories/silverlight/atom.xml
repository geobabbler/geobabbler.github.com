<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: silverlight | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/silverlight/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2014-01-22T15:56:23-05:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with the GeoIQ Features API]]></title>
    <link href="http://blog.geomusings.com/2011/04/07/working-with-the-geoiq-features-api/"/>
    <updated>2011-04-07T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2011/04/07/working-with-the-geoiq-features-api</id>
    <content type="html"><![CDATA[<p>I find myself pointing people to GeoCommons for data more often these days. With over <a href="http://blog.geoiq.com/2011/02/28/50000-unique-datasets-on-geocommons-woot/">50,000 data sets</a>, there's a lot there. The people I work with seem to usually be able to find data of value there so I've been putting a little time into <a href="http://geobabble.wordpress.com/2010/06/02/importing-data-from-geocommons-into-arcmap/">making it easier</a> to get data from GeoCommons. As I've mentioned before, many of them are long-standing ESRI users. While they are becoming more aware of alternate tools and data sources, it is still important for them to be able to get data into the ESRI environment where their custom tools reside.</p>

<p>Given the content of my recent posts, it?s no secret that my recent project work has involved the ESRI Silverlight API so I decided extend it to more easily access data from GeoCommons.</p>

<p><a href="http://geobabble.files.wordpress.com/2011/04/dogs_and_cats.png"><img alt="" class="aligncenter size-full wp-image-1670" height="281" src="http://geobabble.files.wordpress.com/2011/04/dogs_and_cats.png" title="Dogs and cats living together" width="500" /></a></p>

<p>Recently, <a href="http://www.geoiq.com">GeoIQ</a> pubished an update to their RESTful API that includes a "<a href="http://developer.geoiq.com/api/rest-api/#Features-API">Features API</a>," which gives you a little more direct access to the features in a GeoIQ data set (GeoIQ is the platform upon which GeoCommons is built). Previously, if I needed to access data from GeoCommons in the ESRI Silverlight API, I would just access it as KML using the native <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Toolkit.DataSources~ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.html">KmlLayer class</a>. The GeoIQ Features API, however, offers more fine-grained control over how much data we return in the form of various query parameters. Currently, the API only returns JSON (GeoIQ's own syntax or GeoJSON) so it was time to do something different.</p>

<!--more-->


<p><strong>Part 1: Handling the JSON</strong></p>

<p>I set out to develop a custom layer class, derived from the ESRI API's native <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.GraphicsLayer.html">GraphicsLayer</a> class. The bulk of the work was just parsing out the JSON to create the geometries and attach the attributes. If you've worked with the GraphicsLayer class before, this is fairly straightforward. I really just wanted to create a derived class that would take the various parameters of the GeoIQ API and do the heavy lifting behind the scenes.</p>

<p>I have really come to like <a href="http://json.codeplex.com/">JSON.Net</a> by James Newton-King for handling JSON in my .Net code. It is open-source (MIT License) and I've grown comfortable with its LINQ to JSON features. Working with the native GeoIQ JSON, the code to build a list of graphic objects is pretty straightforward:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>   /// &amp;lt;summary&amp;gt;
    /// Iterates array of JSON objects and builds ESRI Graphics
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name="featArray"&amp;gt;Array of JSON strings parsed from the original
    /// returned from GeoIQ&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
    private void UnrollFeaturesEvent(JArray featArray)
    {
        var jEnum = featArray.AsJEnumerable();
        foreach (JToken token in jEnum)
        {
            try
            {
                string s = token.ToString();
                JObject feat = JObject.Parse(s);
                Graphic graphic = new Graphic();
                foreach (JProperty prop in feat.Properties())
                {
                    var name = prop.Name;
                    if (name.ToLower() == GEOM_TOKEN) //handle feature geometry
                    {
                        var geom = GeometryFromWKB.Parse((string)prop.Value); //get geometry from hex-encoded WKB
                        geom.SpatialReference = new SpatialReference() { WKID = 4326 }; //GeoIQ returns geometries in WGS84
                        if (_useMercator) //do we want to use web mercator?
                        {
                            //_wm is an instance of ESRI.ArcGIS.Client.Projection.WebMercator
                            geom = _wm.FromGeographic(geom);
                        }
                        graphic.Geometry = geom;
                    }
                    else //we're dealing with an attribute
                    {
                        object val = prop.Value == null ? "" : prop.Value;
                        graphic.Attributes.Add(prop.Name, val);
                    }
                }
                if (this.AddGraphic != null)
                    AddGraphic(graphic);
            }
            catch { }
        }
     }
</code></pre>

<p>{% endcodeblock %}
<em>Listing 1: Unrolling JSON Features from GeoCommons</em></p>

<p>You'll notice the call to GeometryFromWKB.Parse above. The GeoIQ JSON returns geometries as hex-encoded WKB. To handle this, I modified GeometryFromWKB class from <a href="http://sharpmap.codeplex.com">SharpMap</a> to return an ESRI Silverlight API geometry. Yes, this means I managed to fuse two of <a href="http://sharpgis.net/">Morten's</a> creations together here in some small way.  :)</p>

<p><strong>Part 2: Calling the Features API</strong></p>

<p>So now that we can handle the JSON coming back from GeoIQ, we need to request it. The GeoIQ Features API defines a number of parameters that can be submitted to refine the set of features that is returned. For this pass, I am only implementing lat, lon, radius, units, bbox, intersect and limit. I am also not handling the use of geometries other than points for buffering right now. I set up all of these parameters as dependency properties. That code is rather repetitive but here is an example of how I wrapped one of them:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>    // Using a DependencyProperty as the backing store for Limit.
    public static readonly DependencyProperty LimitProperty =
        DependencyProperty.Register("Limit", typeof(int), typeof(GeoCommonsGraphicsLayer), new PropertyMetadata(0));


    public int Limit
    {
        get { return (int)GetValue(LimitProperty); }
        set { SetValue(LimitProperty, value); }
    }
</code></pre>

<p>{% endcodeblock %}
<em>Listing 2: Dependency property wrapping the "limit" parameter</em></p>

<p>The URI format for calling the Features API is describe in the GeoIQ documentation. From that document here is one example: <em>http://geocommons.com/datasets/22146/features.json?lat=38.8&amp;lon=-78.9&amp;radius=2&amp;intersect=full</em></p>

<p>From here, it?s just a matter of building a valid URI to call using the WebClient (or HttpWebRequest if you prefer) so I start with a template string something like this: <em>http://geocommons.com/datasets/{0}/features.json?</em>, where ?{0}? is a placeholder for the GeoCommons overlay ID. I then build out the query string parameters by rolling up any properties that have been set. Note: for query parameters that have a fixed set of values, I used enumerations that I extend with attributes using the technique described at <a href="http://stackoverflow.com/questions/424366/c-string-enums">http://stackoverflow.com/questions/424366/c-string-enums</a> so that I could get the valid parameter values while presenting more human-readable enumerations. This probably isn?t necessary, but I?ve grown fond of the approach. Here's an example:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>public enum UnitsValues
{
    [StringValue("km")]
    Kilometers = 1,
    [StringValue("m")]
    Meters = 2,
    [StringValue("ft")]
    Feet = 3,
    [StringValue("mi")]
    Miles = 4,
    [StringValue("degrees")]
    Degrees = 5
}
</code></pre>

<p>{% endcodeblock %}
<em>Listing 3: Example of enumeration using StringValue attributes</em></p>

<p>Once we make the call, we handle the reponse like so:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>    void request_DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
    {
        if (e.Error == null)
        {
            this.Graphics.Clear();
            string json = e.Result;
            var jsonHelper = new Zekiah.Helpers.GeoIqJson();
            jsonHelper.AddGraphic += new AddGraphicHandler(jsonHelper_AddGraphic);
            jsonHelper.GetFeatureGraphicsEvent(json, this.UseWebMercator);
        }
    }

    void jsonHelper_AddGraphic(Graphic graphic)
    {
        this.Graphics.Add(graphic); //'this' is the current instance of GeoCommonsGraphicsLayer
    }
</code></pre>

<p>{% endcodeblock %}
<em>Listing 4: Populating the layer with the ESRI graphic objects</em></p>

<p>The code back up in Listing 1 fires an event every time a graphic is created. This saved me at least one iteration through the list of graphics and sped up loading somewhat. It was most noticeable on large GeoCommons overlays.</p>

<p><strong>Part 3: Using the Custom Layer Class.</strong></p>

<p>Once all this is wired up, we can access GeoCommons data from in two ways:</p>

<p>From XAML:</p>

<p>{% codeblock lang:xml %}
 &lt;esri:Map x:Name="Map" Background="White"&gt;</p>

<pre><code>&amp;lt;esri:ArcGISTiledMapServiceLayer ID="BaseLayer" 
   Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&amp;gt;
&amp;lt;ztLayers:GeoCommonsGraphicsLayer ID="Pipelines" ProxyUrl="../ProxyHandler.ashx?" Limit="0" Radius="100" Units="Kilometers" OverlayID="68949" UseWebMercator="True" Visible="True" &amp;gt;
    &amp;lt;ztLayers:GeoCommonsGraphicsLayer.Renderer&amp;gt;
       &amp;lt;esri:SimpleRenderer&amp;gt;
            &amp;lt;esri:SimpleLineSymbol Color="Black" Width="1" Style="Solid" /&amp;gt;
       &amp;lt;/esri:SimpleRenderer&amp;gt;
    &amp;lt;/ztLayers:GeoCommonsGraphicsLayer.Renderer&amp;gt;
    &amp;lt;ztLayers:GeoCommonsGraphicsLayer.QueryPoint&amp;gt;
        &amp;lt;esri:MapPoint X="-92.1" Y="34.5"&amp;gt;
            &amp;lt;esri:MapPoint.SpatialReference&amp;gt;
                &amp;lt;esri:SpatialReference WKID="4326" /&amp;gt;
            &amp;lt;/esri:MapPoint.SpatialReference&amp;gt;
        &amp;lt;/esri:MapPoint&amp;gt;
    &amp;lt;/ztLayers:GeoCommonsGraphicsLayer.QueryPoint&amp;gt;
&amp;lt;/ztLayers:GeoCommonsGraphicsLayer&amp;gt;
</code></pre>

<p> &lt;/esri:Map&gt;
{% endcodeblock %}
<em>Listing 5: Adding a GeoCommons layer in XAML</em></p>

<p>Or in code:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>        GeoCommonsGraphicsLayer polygonLayer = new GeoCommonsGraphicsLayer();
        polygonLayer.Renderer = new SimpleRenderer() { Symbol = GetPolygonSymbol() };
        polygonLayer.ProxyUrl = "../ProxyHandler.ashx?";
        polygonLayer.OverlayID = 68967;
        polygonLayer.UseWebMercator = true; //I may refactor this to check the map's SRID
        this.Map.Layers.Add(polygonLayer);
</code></pre>

<p>{% endcodeblock %}
<em>Listing 6: Adding a GeoCommons layer in code</em></p>

<p>These two examples access data provided to GeoCommons by the State of Arkansas as described by Learon Dalby <a href="http://www.gisuser.com/content/view/23022/222/">here</a>. In XAML, we are accessing the railroad lines that intersect a 100KM buffer around the supplied point. In the second, we are loading all of the state senate district boundaries.</p>

<p>That's fairly high-level overview of the integration tasks that were needed to provide access to GeoCommons from the ESRI Silverlight API using the GeoIQ Features API. I'll post a sample project and code soon once I get things cleaned up a bit more. Stayed tuned...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mapping GISP and PMP Certifications with GeoCommons and the ESRI Silverlight API]]></title>
    <link href="http://blog.geomusings.com/2011/02/02/mapping-gisp-and-pmp-certifications-with-geocommons-and-the-esri-silverlight-api/"/>
    <updated>2011-02-02T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2011/02/02/mapping-gisp-and-pmp-certifications-with-geocommons-and-the-esri-silverlight-api</id>
    <content type="html"><![CDATA[<p>Note: The application described in this post is running <a href="http://demo.zekiah.com/heatmap">here</a>. It requires Silverlight 4.</p>

<p>I was perusing my <a href="http://www.linkedin.com">LinkedIn</a> connections and noticed that quite a few had <a href="http://en.wikipedia.org/wiki/Project_Management_Professional">PMP</a> certifications. I also noticed that most of those who did seemed to be in the Washington, DC area. Of course, given that I live in that region, my sample could be a bit skewed but then I started <a href="http://twitter.com/#!/billdollins/status/30277725008699392">thinking out loud</a> (via Twitter):</p>

<blockquote>I would love to see a heat map showing concentrations of PMPs. I bet the DC area would be white-hot. I suspect others not so much.</blockquote>


<p>Naturally, I could not let this sit. How hard could it be? It turns out it wasn't that hard so I decided to throw a small app together to look at the data. In the process of working out an approach, I decided to also look at <a href="http://www.gisci.org/certification_program_description.aspx">GISP</a> certifications because the data set is smaller and is available as one download from the <a href="http://www.gisci.org/">GISCI</a>. Here's a blow-by-blow:</p>

<!--more-->


<p><strong>Preparing the data</strong></p>

<p>Both the GISCI and <a href="http://www.pmi.org">PMI</a> maintain registries of current certification holders. In the case of the GISCI, the registry is available as a single download, if needed, so I grabbed the current list of certified GISPs (as of January 26, 2011). I only cared about location and date (which I'll make use of in the future) so I stripped out all of the names. Then I deleted all of the non-US records (to keep my geocoding easy). That left me with city, state and date. To geocode the data, I uploaded it to <a href="http://www.geocommons.com">GeoCommons</a>. I have <a href="http://geobabble.wordpress.com/2010/10/06/geocoding-with-geocommons/">blogged about this capability previously</a> but this was a larger data set (and only required matching cities). The processing took about 20 seconds and only missed about 75 records out of about about 4500 records. The majority of the missed locations were APO/FPO addresses so I just removed those records. Once that was done, I left the data up on GeoCommons where <a href="http://geocommons.com/overlays/87503">it's still available</a>.</p>

<p>For the PMP data the basic process was the same but getting the data was a little trickier. The PMI doesn't offer a single download so I had to use their query tool to query US records my the first letter of the last name. The query tool returns a maximum of 1000 records so I ended up with about 24,000 records ("Q", "X" and "Z" don't have 1000 records). I pieced this together in Excel, stripped out the names and ended up with the same information I had for the GISP data. In this case, the data set is not complete but I felt like it probably was still representative of the geographic dispersion of certification holders so I went forward.</p>

<p>The PMP data set was too large to upload and geocode on GeoCommons (which caps geocoding at 5000 records). Fortunately, Kate and <a href="http://www.fortiusone.com">FortiusOne</a> was gracious enough to geocode it for me (I wanted to use the same geocoder for both data sets). After a little cleanup, <a href="http://geocommons.com/overlays/87707">I posted that one to GeoCommons as well</a>.</p>

<p><strong>Mapping the data</strong></p>

<p>I wanted to use a heat map to show the data (for no particular reason). There are numerous ways to accomplish this but I chose to use the <a href="http://help.arcgis.com/en/webapi/silverlight/index.html">ESRI ArcGIS API for Silverlight</a>. I made this choice primarily because a lot of my project work right now involves it so the tools are at my fingertips. Also, it has a HeatMapLayer class which I had not had a chance to try yet.</p>

<p>So I set up a simple mapping application and, at runtime, I load the data from GeoCommons and populate each heat map layer with the points from the appropriate data set. In this case I loaded the data as CSV (which is one of the data options on GeoCommons) by making the appropriate call to the GeoCommons API. I chose CSV because I only needed the latitude and longitude of each location and CSV was actually the least wordy transmission mode. I parsed the data using the <a href="http://kbcsv.codeplex.com/">KBCsv</a> parser available on CodePlex. I could have also loaded the data as GeoJSON and used <a href="http://json.codeplex.com/">JSON.Net</a> or Vish's outstanding <a href="http://viswaug.wordpress.com/2008/05/11/geojsonnet-a-net-library-to-produce-geojson-output/">GeoJSON.Net</a> library but CSV suited my needs in this case. Here is a screen shot showing the GISP data.</p>

<p><a href="http://geobabble.files.wordpress.com/2011/02/gisp_heatmap1.png"><img alt="" class="alignleft size-full wp-image-1484" height="242" src="http://geobabble.files.wordpress.com/2011/02/gisp_heatmap1.png" title="GISP Heat Map" width="590" /></a></p>

<p><strong>Reading the data</strong></p>

<p>So, did the data confirm the suspicion from my original tweet? Yes. The ESRI API calculates heat map intensity based upon the data that is visible in the current map extent. When you zoom out to the whole nation, you can clearly see that the highest concentration of both certifications, by far, is in the Washington, DC area. If you zoom in more and pan around, the mapping adjusts itself so you can get a better representation of other areas by zooming in to them (and away from DC). You can also adjust the display with the intensity tool to bring out some local variations.</p>

<p>What doesn't come across well is relative scale. There are a lot more PMPs than GISPs but that doesn't show well in this presentation. That's why I chose to put a toggle on the map because there's very little value in seeing the two data sets overlaid.</p>

<p>All told, it took about two hours to get the core of the application in place and maybe about another hour to tidy things up. With GeoCommons, it literally took longer to prep the data than to geocode it and the native heat mapping capability of the ESRI Silverlight API was extremely easy to use. The Silverlight implementation shuts out most mobile users and anyone on Linux (Moonlight is not yet Silverlight 4 compatible) so, for those reasons, I'll continue to explore more standards-based approaches but this combination of tools certainly helped me answer my question quickly.</p>

<p>This application is currently being served up live at <a href="http://demo.zekiah.com/heatmap">demo.zekiah.com/heatmap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Annotations With the Esri Silverlight API]]></title>
    <link href="http://blog.geomusings.com/2010/12/16/simple-annotations-with-the-esri-silverlight-api/"/>
    <updated>2010-12-16T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2010/12/16/simple-annotations-with-the-esri-silverlight-api</id>
    <content type="html"><![CDATA[<p>In a previous post, I mentioned that I developed a MeasureString function for use in developing an annotation tool. In this post, I'll go into a little bit more detail about that tool. For purposes of discussion, I extended the interactive graphics sample from the <a href="http://help.arcgis.com/en/webapi/silverlight/samples/start.htm">Esri Silverlight API interactive SDK</a>.</p>

<p>For starters, I added another tool to the sample's tool bar (circled in red below) to provide access to the annotation capability.</p>

<p><img alt="" class="alignleft size-full wp-image-1372" height="168" src="http://geobabble.files.wordpress.com/2010/12/sl_anno_1.png" title="Annotation tool on the toolbar" width="500" /></p>

<!--more-->


<p><strong>The User's View</strong></p>

<p>To kick things off from a user's perspective, you have to first click the tool on the toolbar to activate it and then click a location on the map where you would like your annotation to appear. In order to keep things simple this time around, I am only supporting centering the text on the selected point. After you click on the map, a <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.childwindow(v=vs.95).aspx">Silverlight child window</a> is displayed, as shown below, allowing you to type in your text and set other properties such as font and size (I plan to add a color picker soon).</p>

<p><a href="http://geobabble.files.wordpress.com/2010/12/sl_anno_2.png"><img alt="" class="alignleft size-full wp-image-1374" height="264" src="http://geobabble.files.wordpress.com/2010/12/sl_anno_2.png" title="Child window for setting annotation properties" width="500" /></a></p>

<p>Once you set your various annotation properties, click "OK" to dismiss the child window and your annotation will appear on the map control, centered on the point you clicked. In this case, I set the font to Times New Roman and the size to 16.</p>

<p><a href="http://geobabble.files.wordpress.com/2010/12/sl_anno_3.png"><img alt="" class="alignleft size-full wp-image-1376" height="264" src="http://geobabble.files.wordpress.com/2010/12/sl_anno_3.png" title="Annotation placed on the map" width="500" /></a></p>

<p>That's the basic user-centric process. I took it a step further and added a context menu tied to a right mouse click on a piece of text. This context menu allows you to delete the text or to edit it. If you choose to edit, it simply displays the child window again, showing the properties of the text you selected.</p>

<p><a href="http://geobabble.files.wordpress.com/2010/12/sl_anno_4.png"><img alt="" class="alignleft size-full wp-image-1377" height="264" src="http://geobabble.files.wordpress.com/2010/12/sl_anno_4.png" title="A simple context menu" width="500" /></a></p>

<p><strong>Under the Hood</strong></p>

<p>That's relatively simple. So what's happening to make it work? Let's walk through the procedure above from a code-centric view point.</p>

<p>When you click the tool on the toolbar, you are activating a class behind the tool. The activation method sets up a <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.Draw.html">Draw</a> object in point mode like so:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>        if (_draw == null)
        {
            _draw = new Draw(BoundMap); //private class-level variable of type ESRI.ArcGIS.Client.Draw
            _draw.DrawComplete += DrawCompleteHandler; //subscribe to the DrawComplete event
            _activated = true;
            _draw.IsEnabled = true; //enable the Draw object
        }
        _draw.DrawMode = DrawMode.Point; //set it to Point mode
</code></pre>

<p>{% endcodeblock %}</p>

<p>When you click on the map, the Draw object's DrawComplete event is fired. The event handler simply displays the child window like so:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>    private void DrawCompleteHandler(object sender, DrawEventArgs args)
    {
        _currentPoint = args.Geometry as MapPoint; //capture the point that where the mouse was clicked
        TextSymbolPropsWindow win = new TextSymbolPropsWindow(); //My child window. This can be any you define.
        win.EditMode = false; //this tells the window that this is a new annotation
        win.Closed += new EventHandler(win_Closed); //subscribe to the window's Closed event
        win.Show();
    }
</code></pre>

<p>{% endcodeblock %}</p>

<p>At this point, the child window is displayed and you can set the text properties as you see fit. The code in the window itself really does nothing other than manage the window display. If you change the font, it is reflected in the textbox, as is the font size so that you can see what your annotation will look like. The heavy lifting is really done once the window is closed.</p>

<p>This where the other key object from the Esri Silverlight API comes into play: the <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.Symbols.TextSymbol.html">TextSymbol</a> object. In order to draw the text, the code creates a graphic object using the point geometry captured on the mouse click and symbolizes it using a text symbol instead of an icon or some other marker symbol. That work all happens in the child window's Closed event as follows:</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>    void win_Closed(object sender, EventArgs e)
    {
        TextSymbolPropsWindow win = sender as TextSymbolPropsWindow;
        if ((bool)win.DialogResult)
        {
            GraphicsLayer graphicsLayer = BoundMap.Layers["AnnoLayer"] as GraphicsLayer; //the layer on which the anno will be drawn
            string input = win.Annotation; 

            if (!String.IsNullOrEmpty(input))
            {
                MapPoint pt = _currentPoint; //the location of the original mouse click
                TextSymbol sym = new TextSymbol(); //create a new text symbol
                sym.FontFamily = new FontFamily(win.TextFont);  //set the symbol's font from the window value
                sym.FontSize = win.TextFontSize;  //set the symbol's font size from the window value
                sym.Text = win.Annotation; //apply the text string from the window to the symbol
                sym.Foreground = new SolidColorBrush { Color = Colors.Black }; //set the color. this could be user-selectable as well
                Zekiah.Samples.Font f = new Font(); //this is a simple container object I wrote to pass font properties around
                f.Family = sym.FontFamily;
                f.Size = sym.FontSize;
                f.Style = FontStyles.Normal;
                f.Weight = FontWeights.Normal;
                String s = new String(input.ToCharArray());

                Size size = s.Measure(f); //use the extension method to measure the string
                sym.OffsetX = size.Width / 2; //set offset to center horizontally
                sym.OffsetY = size.Height / 2; //set offset to center vertically
                //create the graphic and apply the geometry and symbol
                ESRI.ArcGIS.Client.Graphic graphic = new ESRI.ArcGIS.Client.Graphic()
                {
                    Geometry = pt,
                    Symbol = sym,
                };
                //set up the mouse event for the context menu
                graphic.MouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(graphic_MouseRightButtonDown);
                //this block replaces the previous annotation if this was an edit operation
                if (win.EditMode)
                {
                    graphicsLayer.Graphics.Remove(Ambient.SelectedSymbol);

                }
                graphicsLayer.Graphics.Add(graphic); //add the new graphic to the map
            }
        }
    }
</code></pre>

<p>{% endcodeblock %}</p>

<p>That's the core of the work. You'll notice above that we use OffsetX and OffsetY to center the text. These values are in screen units as opposed to map units and this is why we need to know the size of the text string. The call to the "Measure" method is a call to <a href="http://geobabble.wordpress.com/2010/10/08/measurestring-for-silverlight/">the extension method I described here</a>. You'll also notice that I don't set the font weight or style. That's because the TextSymbol object doesn't seem to support those attributes yet. I could probably play with using styles to accomplish that but it wasn't necessary for this iteration. There also doesn't seem to be a built-in way to control rotation or scaling. Those may be able to be accomplished by other means but were not necessary for this iteration, either.</p>

<p>From here, you can go on to implement things like the context menu as you see fit. A couple of notes on some specifics: In the child window, I used the numeric up/down control from the <a href="http://silverlight.codeplex.com/">Silverlight Toolkit</a>. For the context menu, I used the <a href="http://sl4popupmenu.codeplex.com/">SL4PopupMenu</a> from Codeplex. I found the context menu from the Silverlight Toolkit didn't behave as expected when attaching events to map graphics.</p>

<p>So that was the basic process I followed for implementing simple, interactive annotations using the Esri Silverlight API. I'll try to get a working demo posted up soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ten-Second Tidy]]></title>
    <link href="http://blog.geomusings.com/2010/12/10/ten-second-tidy/"/>
    <updated>2010-12-10T00:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2010/12/10/ten-second-tidy</id>
    <content type="html"><![CDATA[<p>Things have been a bit hectic the last few weeks and that's left little time for blogging. Quite a bit has happened so I thought I'd do a little round-up (if for no other reason than to clear my own head).</p>

<p>{% youtube cJa7P6dfmco %}</p>

<p>In no particular order:</p>

<p><strong>Steve Coast to Microsoft</strong> (I told you it had been a while) - Firstly, congratulations to Steve (#sincerity).  Secondly, this clearly is the final proof that crowd-sourced data in general, and OpenStreetMaps (sic) in particular, <a href="http://geobabble.wordpress.com/2010/09/16/be-the-crowd/">has no real value when compared to "authoritative" data sources</a> (#sarcasm).</p>

<p><strong>Google Fusion Tables</strong> - The only real problem at this point is the size limitation but, otherwise, this will be a game-changer for storing and sharing data. In its current form, it's already fairly easy to push your data up and expose it through Google's APIs. It'll be interesting to see if it gets easier. Support for spatial queries hints at some analytical capability, too. Speaking of which...</p>

<p><strong>Analytics in GeoCommons</strong> - This is one to watch. They are debuting a new function each day <a href="http://blog.fortiusone.com/2010/12/06/the-12-analytics-of-christmas/">on their blog</a>. FortiusOne builds their platform API-first, UI-second so everything they are showing should be exposed through their APIs. This will be a huge step in moving cloud-based geospatial technology from the "bit-bucket" stage to having a more complete workflow on the cloud infrastructure.</p>

<!--more-->


<p><strong>Arc2Earth Data Services and Arc2Cloud</strong> - Continuing the theme of building a complete workflow, <a href="http://www.arc2earth.com">Arc2Earth</a> is working on exposing a <a href="http://www.arc2earth.com/services/data-services/">complete range of Google geospatial services</a> to ArcGIS Desktop users. It's no secret that I'm a fan of Arc2Earth (and <a href="http://www.zekiah.com">my company</a> is a reseller), but this represents a big expansion of capability. Google's cloud infrastructure works differently that Amazon's and I think what <a href="http://beta.arc2cloud.com/">Arc2Earth is doing</a> is important because it will open up another channel for users and enable them to <a href="http://geobabble.wordpress.com/2010/07/26/clouds/">make choices based on their needs and requirements</a>.</p>

<p><strong>WeoGeo</strong> - <a href="http://www.weogeo.com">These guys</a> never sit still either. They've got some changes coming up that will greatly increase flexibility for managing spatial data on a cloud infrastructure. Taken together with the previous two entries on GeoCommons and Arc2Earth, I see a lot of innovation in cloud-based GIS really being driven by small, focused companies. This is not simply "push your server to an AMI and keep working." (Although that approach can have some utility.) Each of these companies is trying to figure out how to leverage the unique capabilities of cloud infrastructures to build new workflows and expand capability for users. And, it's important to note, they are making headway.</p>

<p><strong>WhereCampDC</strong> - Obviously, judging from the <a href="http://wherecampdc.org/">web site</a>, it's still in the early planning stages but I'm excited by the idea. This is exactly the kind of independent event that this area needs. I have always been baffled by the lack of such events in this area, especially given the level of geospatial activity around here.</p>

<p><strong>Google Earth 6</strong> - The <a href="http://www.google.com/earth/index.html">latest release</a> confirms that StreetView has yet to drive my street. For that I am happy.</p>

<p><strong>FOSS4G</strong> - The conference doesn't happen until next September and already the buzz is building. I have had people that I know have yet to touch an open-source GIS tool ask me what I know about "that <a href="http://foss4g.org/static/index.html">conference</a> I'm hearing about in Denver."</p>

<p><strong>Silverlight</strong> - I can't think of a technology in recent years that has given me more of a feeling of ambivalence. It has great capability and the Esri Silverlight API team has done good work building on it (this piece addresses Silverlight, not the Esri API). I think it'll continue to be a fine technology for intranet development but I'll leave it there. I don't expect my work with it to wind down anytime soon so I'll keep blogging it as I think it's perfectly possible to be productive with Silverlight within certain parameters. <a href="http://techcrunch.com/2010/10/30/rip-silverlight-on-the-web/">The whole episode regarding its future</a> (which was something of a tempest in a teapot, in reality) simply highlights the risks involved in relying on closed, proprietary technologies. This time, it was Silverlight, but make no mistake, the same risks are there with Flex/Flash (it just runs on more browser/OS combinations). Of course, there are risks with <em>any</em> technology choice but it's nice when those risks do not include "whim."</p>

<p>So that's it for my odds and ends. It's good to get them stuffed back into the couch. 2010 has been an interesting year. It almost feels like a year in which groundwork is being laid. It may just be me, but I have a feeling of anticipation similar to what I feel right before the first daffodils appear in Spring. It just feels like there's a good bit of pent-up energy and that a lot of new things are about to spring forth. It could be loads of fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DynamicLayer Auto-Refresh for ESRI Silverlight API]]></title>
    <link href="http://blog.geomusings.com/2010/11/01/dynamiclayer-auto-refresh-for-esri-silverlight-api/"/>
    <updated>2010-11-01T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2010/11/01/dynamiclayer-auto-refresh-for-esri-silverlight-api</id>
    <content type="html"><![CDATA[<p>Despite <a href="http://techcrunch.com/2010/10/30/rip-silverlight-on-the-web/">recent news regarding Silverlight</a>, I expect some of my projects to continue using it for the near term. Others may be taking the same tack, so I thought I'd go ahead and offer this up.</p>

<p>Several of the projects I support have the requirement to periodically refresh specific layers in order to track change or movement. These layers can range from weather to vehicle locations and such. I have typically accomplished this with a timer that refreshes the layer(s) on a specified interval. This can get rather cumbersome if you have different layers that require different refresh intervals.</p>

<p>Working within <a href="http://www.silverlight.net/">Silverlight</a>, I have the option of using an existing layer class as a base class and extending it to include an automatic refresh capability. However, some classes, such as the <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.html">ArcGISDynamicMapServiceLayer</a>, are sealed and cannot be extended. Luckily, the <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=d197f51a-de07-4edf-9cba-1f1b4a22110d&amp;displaylang=en">Expression Blend SDK</a> enables me to get around this by attaching a custom behavior. <!--more--></p>

<p>The ArcGISDynamicMapServiceLayer descends from the <a href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.DynamicLayer.html">DynamicLayer</a> inheritance hierarchy, which provides access to a <em>Refresh</em> method. So I developed the following behavior to attach to a DynamicLayer (or anything that derives from it). It makes use of a <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatchertimer.aspx">DispatcherTimer</a> to refresh the layer to which it is attached. In this particular implementation, each layer gets its own timer. That met my requirement of having different refresh rates for different layers. It may be preferable in some instances to pass in a reference to a single timer to control all layers. In either case, you can simply attach the behavior only to those layers that you need to refresh. This can get you around iterating the map's <em>Layers</em> collection at each timer tick (or other such approaches).</p>

<p>This is the code for the behavior itself. Scroll down for a snippet showing how to implement it.</p>

<p>{% codeblock lang:csharp %}
/*Copyright (c) 2010, Zekiah Technologies, Inc.
All rights reserved.</p>

<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>

<p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of the Zekiah Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/</p>

<p>using System;
using System.Windows.Input;
using System.Windows.Interactivity;
using System.Windows.Threading;
using ESRI.ArcGIS.Client;
using ESRI.ArcGIS.Client.Geometry;
using System.Windows;</p>

<p>namespace Zekiah.ArcGIS.Behaviors
{</p>

<pre><code>/// &amp;lt;summary&amp;gt;
/// Adds automatic refresh to a DynamicLayer object (or any
/// class that inherits from DynamicLayer. 
/// &amp;lt;/summary&amp;gt;
public class AutoRefresh : Behavior&amp;lt;DynamicLayer&amp;gt;
{
     private DispatcherTimer _tmr = null;

    /// &amp;lt;summary&amp;gt;
    /// Called after the behavior is attached to an AssociatedObject.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;remarks&amp;gt;Override this to hook up functionality to the AssociatedObject.&amp;lt;/remarks&amp;gt;
    protected override void OnAttached()
    {
        base.OnAttached();

        initTimer();
    }

    public TimeSpan Interval
    {
        get
        {
            if (_tmr == null)
            {
                initTimer();
            }
            return _tmr.Interval;
        }
        set
        {
            if (_tmr == null)
            {
                initTimer();
            }
            _tmr.Interval = value;
        }
    }

    public void Start()
    {
        if (_tmr == null)
            initTimer();
        if (!_tmr.IsEnabled)
            _tmr.Start();
    }

    public void Stop()
    {
        if ((_tmr != null) &amp;amp;&amp;amp; (_tmr.IsEnabled))
            _tmr.Stop();
    }

    /// &amp;lt;summary&amp;gt;
    /// Called when the behavior is being detached from its AssociatedObject, 
    /// but before it has actually occurred.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;remarks&amp;gt;Override this to unhook functionality from the AssociatedObject.&amp;lt;/remarks&amp;gt;
    protected override void OnDetaching()
    {
        base.OnDetaching();
        _tmr = null;
    }

    private void initTimer()
    {
        _tmr = new DispatcherTimer();
        _tmr.Interval = new TimeSpan(0, 0, 30); //default thirty second interval
        _tmr.Tick += new EventHandler(_tmr_Tick);
    }

    void _tmr_Tick(object sender, EventArgs e)
    {
        this.AssociatedObject.Refresh();
    }

 }
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The following code shows how to attach the behavior. In this case, I just kept the default 30 second interval (more than enough for this weather layer). For layers of type ArcGISDynamicMapServiceLayer, it is necessary to set <em>DisableClientCaching</em> to true or you'll never see a refresh.</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>        var lyr = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
        lyr.DisableClientCaching = true;
        lyr.Url = "http://services.nationalmap.gov/ArcGIS/rest/services/NEXRAD_Weather/MapServer";

        var autoRefresh = new Zekiah.ArcGIS.Behaviors.AutoRefresh();
        var behaviors = System.Windows.Interactivity.Interaction.GetBehaviors(lyr);
        behaviors.Add(autoRefresh);
        autoRefresh.Start();
        this.Map.Layers.Add(lyr);
</code></pre>

<p>{% endcodeblock %}</p>

<p>I've used this for both ArcGIS Server dynamic layers as well as WMS layers so far. I also have a version that attached to GraphicsLayer objects so that I can refresh GeoRSS layers. So far this technique has worked pretty well for me.</p>
]]></content>
  </entry>
  
</feed>
