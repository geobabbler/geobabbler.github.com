<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[geoMusings]]></title>
  <link href="http://blog.geomusings.com/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2014-01-07T21:03:59-05:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Of Predictions and (Geo)Hipsters]]></title>
    <link href="http://blog.geomusings.com/2014/01/07/predictions/"/>
    <updated>2014-01-07T20:09:00-05:00</updated>
    <id>http://blog.geomusings.com/2014/01/07/predictions</id>
    <content type="html"><![CDATA[<p>&#8220;Never make predictions, especially about the future.&#8221; - Casey Stengel</p>

<p>A few days ago, my friend <a href="http://www.linkedin.com/profile/view?id=8637855">Atanas Entchev</a> asked me for <a href="http://geohipster.com/2013/12/31/what-will-be-hot-in-geo-in-2014-predictions-from-the-geohipster-crowd/">my thoughts on coming trends in 2014</a> for a feature he was preparing for his <a href="http://geohipster.com/">GeoHipster</a> site. Being the obliging sort that I am, I provided a couple and I&#8217;ve been attempting to explain one ever since. This has mostly been back-channel via private messages and such but, today, the GeoHipster piece was the subject of the &#8220;#geowebchat&#8221; on Twitter. Twitter is very effective for some types of communication but quickly goes off the rails where nuance or anything long-form is required. So, it was time for a post. My prediction went like this:</p>

<blockquote><p>I think 2014 will be the year Javascript takes over mapping and visualization in the geospatial world.</p></blockquote>

<p>It was followed by an apparently too brief explanation that I will attempt to expand here.</p>

<!--more-->


<p>I am very fortunate that, in my professional circle, I am connected to a number of people who are doing very cutting-edge things with a lot of technologies. These people have been doing very impressive things with various web technologies for a number of years. So much so that these technologies are somewhat mundane in those circles. As a person who makes my living supporting Federal contracts for a number of agencies, I also have a foot in another camp that has not been as far along with these tools.</p>

<p>Before I get too far into this, I will state that there are many people building very cutting-edge systems in and for the Federal government, but the penetration of modern web tools and techniques is very uneven for a number of reasons. The reasons range from procurement inefficiencies to byzantine information security requirements to workforce training issues and so on. This is generally a reflection of process, not people. As a result, there are still many shops operating on platforms such as Windows XP and Internet Explorer 8, which does not allow for advanced web development.</p>

<p>My observation over on GeoHipster was not targeted at the cutting-edge developers but rather a reflection of changing trends I am seeing across the vast middle of the technology sector represented by large teams of developers working in the bullpens of various government buildings and large system integrators. Initiatives are under way to begin swapping out antiquated technologies for more modern, if still slightly behind the curve, versions that allow for more modern approaches. These initiatives happen to coincide with a push by major vendors away from older technologies, such as browser plug-ins, to more standard development tools such as Javascript, and its supporting ecosystem.</p>

<p>This community is made up of a vast number of very talented developers who have been working with middle of the road technologies for all of the reasons discussed above. The maturation of tools and processes in the Javascript ecosystem lends itself to wider adoption going forward and I see that accelerating in 2014. Dave Bouwman&#8217;s <a href="http://blog.davebouwman.com/2014/01/04/javascript-fu/">excellent post on Javascript tools</a> is exactly the kind of resource that shows developers used to working with heavy IDEs and other tools that provide a lot of hand-holding how to achieve the productivity they expect with the next generation of development tools. Dave, of course, is also well-versed is the life these developers lead so I am certain he had an eye on that community with his post.</p>

<p>All of this leads to great opportunity. For as much great work that has already been done, there is an army of smart, talented developers who have yet to be turned loose with modern web tools. This is a community that implemented geofencing, &#8220;geotriggers,&#8221; location-based alerting and other concepts using older languages and architectures at least a decade before they appeared in the current marketplace.</p>

<p>So, ultimately, my prediction had very little to do with Javascript and modern web technologies and much more to do with the talents of a large developer community that has been waiting to make use of them. Overly optimistic? Perhaps, but it beats the alternative.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[geoMusings 2013]]></title>
    <link href="http://blog.geomusings.com/2013/12/30/thank-you-and-happy-2014/"/>
    <updated>2013-12-30T16:00:00-05:00</updated>
    <id>http://blog.geomusings.com/2013/12/30/thank-you-and-happy-2014</id>
    <content type="html"><![CDATA[<p>As we enter the final hours of 2013, I wanted to take the chance to thank everyone who stopped by, and continues to stop by, this blog. I appreciate your readership, comments, and feedback. Even after 7 years, I am still humbled by the fact that so many read this blog each year. I decided to take a look at the top ten posts from this year, according to Google Analytics.</p>

<ol>
<li><a href="http://blog.geomusings.com/2013/01/30/yes-you-need-to-code/">Yes, You Need to Code</a></li>
<li><a href="http://blog.geomusings.com/2013/06/18/geojson-on-github-now-what/">GeoJSON on GitHub: Now What?</a></li>
<li><a href="http://blog.geomusings.com/2013/06/10/geojson-from-arcgis-server/">GeoJSON From ArcGIS Server</a></li>
<li><a href="http://blog.geomusings.com/2013/08/07/spatialite-and-arcgis-10-dot-2/">SpatiaLite and ArcGIS 10.2</a></li>
<li><a href="http://blog.geomusings.com/2013/01/22/checking-out-the-gdal-slash-ogr-plugin-for-arcgis/">Checking Out the GDAL/OGR Plugin for ArcGIS</a></li>
<li><a href="http://blog.geomusings.com/2013/05/30/ogc-abandons-the-web/">OGC Abandons the Web</a></li>
<li><a href="http://blog.geomusings.com/2013/07/28/devops-for-geospatial-data/">DevOps for Geospatial Data</a></li>
<li><a href="http://blog.geomusings.com/2013/09/12/another-look-at-gis-stackexchange/">Another Look at GIS StackExchange</a></li>
<li><a href="http://blog.geomusings.com/2013/11/27/consider-the-alternative/">Consider the &#8216;Alternative&#8217;</a></li>
<li><a href="http://blog.geomusings.com/2013/03/20/the-best-thing-i-saw-at-tugis-2013/">The Best Thing I Saw at TUGIS 2013</a></li>
</ol>


<p>When I took a look at the list above, I realized that I have been much more focused on data than I have in past years. I think I kept a development/integration flavor but the focus on data was quite noticeable in retrospect. Though I have been actively coding all year, I notice that I did not have as many code-focused posts, which is something of a departure from previous years. 2014 is already shaping up to be a busy year personally and professionally so it will be interesting to see where that leads me on this blog.</p>

<p>Thanks again for your continued interest and I hope you have a fruitful 2014.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DC DevSummit In Works for 2014 Esri Federal GIS Conference]]></title>
    <link href="http://blog.geomusings.com/2013/12/27/dc-devsummit-in-works-for-2014-esri-federal-gis-conference/"/>
    <updated>2013-12-27T13:15:00-05:00</updated>
    <id>http://blog.geomusings.com/2013/12/27/dc-devsummit-in-works-for-2014-esri-federal-gis-conference</id>
    <content type="html"><![CDATA[<p>I got word today that <a href="http://www.esri.com">Esri</a> is planning a one-day [Developer Summit] in conjunction with the <a href="http://www.esri.com/events/federal/">2014 Federal GIS Conference</a>. It appears that the DevSummit will happen on the Wednesday immediately following the Fed Conference (which runs on the Monday and Tuesday) and will be focused on the issues and challenges that are unique to developing applications with Esri technologies for the Federal Government. I spoke with <a href="http://www.linkedin.com/in/jdbarry">Jim Barry</a>, who told me the DevSummit has come together rather quickly and Esri hasn&#8217;t had time to do its usual data gathering to prepare for such an event. As a result, they are canvassing the developer community for input on topics they should cover. Here are some things I suggested:</p>

<!--more-->


<ul>
<li><p>Developing for <a href="http://en.wikipedia.org/wiki/Federal_Information_Security_Management_Act_of_2002">FISMA</a> compliance - FISMA compliance has to be baked into an application from the beginning. It would be great to see some content on best practices and resources available to support this when developing with Esri tools and APIs. Esri&#8217;s regional office in Vienna, Virginia has been doing a lot of work in this area but I&#8217;m not sure the information is widespread.</p></li>
<li><p>Desktop development - I still see <em>a lot</em> of ArcGIS desktop development in the Federal arena. This ranges from traditional ArcObjects extensions to add-ins to work with the File Geodatabase API. I think content related to how to do continued desktop development and support in light of the current realities of highly constrained desktop environments would be invaluable. For example, how to construct and deploy applications that don&#8217;t necessarily need to touch the registry and can be deployed without administrative rights. Also, some content on the future of Esri desktop products (like <a href="http://video.esri.com/watch/2533/unveiling-the-new-arcgis-professional-application-with-jim-mckinney-and-jack-dangermond">ArcGIS Professional</a>) and what it means for application developers would be useful.</p></li>
</ul>


<p><img src="http://blog.geomusings.com/images/posts/code.png" style="float:left;margin: 5px 25px 5px 0px;" /></p>

<ul>
<li><p>.Net - There&#8217;s still a lot of .Net development going on in Federal spaces. Most of my Federal customers are still primarily using .Net and you can peruse Federal geospatial RFPs on any given day and see that it is widespread. I&#8217;m fairly comfortable with .Net, as are most of the government and contractor developers I work with but it would be good to have some .Net-focused content alongside the newer, sexier platforms.</p></li>
<li><p><a href="http://www.arcgis.com/features/">ArcGIS Online for Organizations</a> - Whatever messaging Esri thinks they are doing is not working very well. I encounter a great many Federal users who simply don&#8217;t understand what it can do for them, why they would consider it, how to budget for it, or whether they can really use it. My understanding is the main Federal GIS Conference will be talking about these issues a lot so I think the DevSummit should focus on the <a href="https://developers.arcgis.com/en/">tools and APIs</a> that are available so that developers can begin to address the ideas the main conference attendees will come back with.</p></li>
<li><p>Data interoperability - I have spent a lot of time over the past year developing tools to support data modeling and configuration management efforts for some Federal users. Part of this work has involved developing tools to produce physical implementations of approved geospatial data models in a number of formats, though the formats that have been of primary interest with my customers have been the Esri File Geodatabase and <a href="http://www.gaia-gis.it/gaia-sins/">SpatiaLite</a>. The general workflows I have seen involve users working with Esri geodatabase formats in the office, while ingesting field-collected data in SpatiaLite format. All of this data needs to remain compliant with approved data models throughout the life cycle, regardless of format. <a href="http://www.zekiah.com/index.php?q=blog/topics/pim">We&#8217;ve been tackling that</a> at <a href="http://www.esri.com">Zekiah</a> with good success. Given the support of SQLite/SpatiaLite in ArcGIS 10.2, I&#8217;d like to see some discussion of data conversion/interoperability approaches that developers can automate with Esri tools.</p></li>
</ul>


<p>Those are some topics I suggested to Jim off the top of my head. I&#8217;ll probably think of more. Jim and his team at Esri are actively seeking this sort of input since time is short so I&#8217;d suggest <a href="http://www.linkedin.com/in/jdbarry">contacting him</a> with your thoughts. Given the short timeframe, I&#8217;d expect official information from Esri very soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS.Geo 2014 Announced]]></title>
    <link href="http://blog.geomusings.com/2013/12/27/js-dot-geo-2014-announced/"/>
    <updated>2013-12-27T08:29:00-05:00</updated>
    <id>http://blog.geomusings.com/2013/12/27/js-dot-geo-2014-announced</id>
    <content type="html"><![CDATA[<p>Information about the follow-up to last year&#8217;s <a href="http://www.jsgeo.org/">JS.Geo</a> event has been percolating back-channel for a few weeks now. Now some <a href="http://lanyrd.com/2014/jsgeo14/">official details have been posted</a>. This year&#8217;s event will be held in April in San Francisco. I attended last year&#8217;s session, really liked the focused format, and got a lot of good information out of it. One thing that was nice was that, regardless of whether you are of an Esri or open-source persuasion in your development preferences, there was a lot of good information presented with a relative lack of hyperbole, which made it easy to focus on the content.</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/jsgeo13.png" /></p>

<p>As <a href="http://twitter.com/geo_rube">Todd Barr</a> <a href="http://drunkengeographer.tumblr.com/post/69908102132/when-i-realize-that-no-one-who-plans-gis-spatial">eloquently points out</a>, the April 2014 calender is somewhat crowded with geo-events but, based on last year&#8217;s event, I&#8217;d recommend putting JS.Geo at the top of the list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Simple Geodata Service with Node, PostGIS, and Amazon]]></title>
    <link href="http://blog.geomusings.com/2013/12/11/building-a-simple-geodata-service-with-node-and-amazon-rds/"/>
    <updated>2013-12-11T15:18:00-05:00</updated>
    <id>http://blog.geomusings.com/2013/12/11/building-a-simple-geodata-service-with-node-and-amazon-rds</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong></p>

<p>This post describes the construction of a simple, lightweight geospatial data service using Node.JS, PostGIS and Amazon RDS. It is somewhat lengthy and includes a number of code snippets. The post is primarily targeted at users who may be interested in alternative strategies for publishing geospatial data but may not be familiar with the tools discussed here. This effort is ongoing and follow-up posts can be expected.</p>

<p><strong>Rationale</strong></p>

<p>I&#8217;m always looking for opportunities to experiment with new tools and the announcement of PostgreSQL/PostGIS support on Amazon RDS piqued my curiosity. Over the past six months, I have run into the repeated need on a couple of projects to be able to get the bounding box of various polygon features in order to drive dynamic mapping displays. Additionally, the required spatial references of these projects have varied beyond WGS84 and Web Mercator.</p>

<p>With that, the seeds of a geodata service were born. I decided to build one that would, via a simple HTTP call, return the bounding box of a polygon or the polygon itself, in the spatial reference of my choice as a single GeoJSON feature.</p>

<p>I knew I wanted to use PostGIS hosted on Amazon RDS to store my data. Here are the rest of the building blocks for this particular application:</p>

<ol>
<li><a href="http://nodejs.org">Node.js</a></li>
<li>Express web application framework for Node</li>
<li>PG module for accessing PostgreSQL with Node</li>
<li>Natural Earth 1:10M country boundaries</li>
</ol>


<!--more-->


<p><strong>Setting up PostGIS on Amazon RDS</strong></p>

<p>Setting up the PostgreSQL instance on RDS was very easy. I simply <a href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreatePorstgreSQLInstance.html">followed the instructions here</a> for doing it in the AWS Management Console. I also got a lot of use out of <a href="http://www.databasesoup.com/2013/11/first-look-at-postgresql-rds-on-amazon.html">this post by Josh Berkus</a>. Don&#8217;t forget to also set up your security group to govern access to your database instance <a href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithSecurityGroups.html">as described here</a>. I prefer to grant access to specific IP addresses.</p>

<p>Now that the Amazon configuration is done, your RDS instance essentially behaves the same as if you had set it up on a server in your server room. You can now access the instance using all of the standard PostgreSQL tools with which you are familiar. This is good because we need to do at least one more thing before we load our spatial data: we have to enable the PostGIS extension. I find that it is easiest to accomplish this at the command line:</p>

<p><em>psql -U {username} -h {really long amazon instance host name} {database name}</em></p>

<p>Once you&#8217;ve connected, issue the command to enable PostGIS in your database:</p>

<p><em>CREATE EXTENSION postgis;</em></p>

<p>You may also want to enable topology while you&#8217;re here:</p>

<p><em>CREATE EXTENSION postgis_topology;</em></p>

<p>This should complete your setup. Now you are ready to load data.</p>

<p><strong>Loading Spatial Data</strong></p>

<p>As I mentioned above, we are now dealing with a standard PostgreSQL server that happens to be running on Amazon RDS. You can use whatever workflow you prefer to load your spatial data.</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/pgadmin_rds.png" /></p>

<p>I downloaded the <a href="http://www.naturalearthdata.com/downloads/10m-cultural-vectors/">Natural Earth 1:10M country polygons</a> for this effort. Once downloaded, I used the DB Manager extension to <a href="http://qgis.org">QGIS</a> to import the data to PostgreSQL. I also did a test import with <a href="http://www.gdal.org/ogr/">OGR</a>. Both worked fine so it&#8217;s really a matter of preference.</p>

<p><strong>Building the Application</strong></p>

<p>I chose to use Node.js because it is very lightweight and ideal for building targeted web applications. I decided to use the <a href="http://expressjs.com/">Express web framework for Node</a>, mainly because it makes things very easy. To access PostgreSQL, I used the <a href="https://github.com/brianc/node-postgres">node-postgres module</a>. I was planning to deploy the application in an Ubuntu instance on Amazon EC2, so I chose to do the development on Ubuntu. Theoretically, that shouldn&#8217;t matter with Node but the node-postgres module builds a native library when it is installed so it was a factor here.</p>

<p>After building the package.json file and using that to install the Express, node-postgres, and their dependencies, I build a quick server script to act as the web interface for the application. This is where Express really excels in that it makes it easy to define resource paths in an application.</p>

<figure class='code'><figcaption><span>server.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">geo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/geo&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/countries/:id/bbox&#39;</span><span class="p">,</span> <span class="nx">geo</span><span class="p">.</span><span class="nx">bbox</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/countries/:id/bbox/:srid&#39;</span><span class="p">,</span> <span class="nx">geo</span><span class="p">.</span><span class="nx">bboxSrid</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/countries/:id/polygon&#39;</span><span class="p">,</span> <span class="nx">geo</span><span class="p">.</span><span class="nx">polygon</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/countries/:id/polygon/:srid&#39;</span><span class="p">,</span> <span class="nx">geo</span><span class="p">.</span><span class="nx">polygonSrid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Listening on port 3000...&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The four &#8220;app.get&#8221; statements above define calls to get either the bounding box or the actual polygon for a country. When the &#8220;:srid&#8221; parameter is not specified, the resulting feature is returned in the default spatial reference of WGS84. If a valid EPSG spatial reference code is supplied, then the resulting feature is transformed to that spatial reference. The &#8220;:id&#8221; parameter in all of the calls represents the ISO Alpha-3 code for a country. You will notice that the application listens on port 3000. More on that later.</p>

<p>The next step is to define the route handlers. In this application, this where interaction with PostGIS will take place. Note that each of the exports correspond to the callback functions in the app.get statements above.</p>

<figure class='code'><figcaption><span>geo.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">pg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pg&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">conString</span> <span class="o">=</span> <span class="s2">&quot;postgres://username:password@hostname.rds.amazonaws.com:5432/database&quot;</span><span class="p">;</span> <span class="c1">//TODO: point to RDS instance</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">bbox</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="nx">conString</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">crsobj</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;urn:ogc:def:crs:EPSG:6.3:4326&quot;</span><span class="p">}};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">idformat</span> <span class="o">=</span> <span class="s2">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">idformat</span> <span class="o">=</span> <span class="nx">idformat</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;select st_asgeojson(st_envelope(shape)) as geojson from ne_countries where iso_a3 = &quot;</span> <span class="o">+</span> <span class="nx">idformat</span> <span class="o">+</span> <span class="s2">&quot;;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retval</span> <span class="o">=</span> <span class="s2">&quot;no data&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;No data found&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//build a GeoJSON feature and return it</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;feature&quot;</span><span class="p">,</span><span class="nx">crs</span><span class="o">:</span> <span class="nx">crsobj</span><span class="p">,</span> <span class="nx">geometry</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">geojson</span><span class="p">),</span> <span class="nx">properties</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;iso&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="s2">&quot;representation&quot;</span><span class="o">:</span> <span class="s2">&quot;extent&quot;</span><span class="p">}});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">bboxSrid</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="nx">conString</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">crsobj</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;urn:ogc:def:crs:EPSG:6.3:&quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">srid</span><span class="p">}};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">idformat</span> <span class="o">=</span> <span class="s2">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">idformat</span> <span class="o">=</span> <span class="nx">idformat</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;select st_asgeojson(st_envelope(st_transform(shape, &quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">srid</span> <span class="o">+</span> <span class="s2">&quot;))) as geojson from ne_countries where iso_a3 = &quot;</span> <span class="o">+</span> <span class="nx">idformat</span> <span class="o">+</span> <span class="s2">&quot;;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retval</span> <span class="o">=</span> <span class="s2">&quot;no data&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;No data found&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;feature&quot;</span><span class="p">,</span><span class="nx">crs</span><span class="o">:</span> <span class="nx">crsobj</span><span class="p">,</span> <span class="nx">geometry</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">geojson</span><span class="p">),</span> <span class="nx">properties</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;iso&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="s2">&quot;representation&quot;</span><span class="o">:</span> <span class="s2">&quot;extent&quot;</span><span class="p">}});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">polygon</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//TODO: Flesh this out. Logic will be similar to bounding box.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="nx">conString</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">crsobj</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;urn:ogc:def:crs:EPSG:6.3:4326&quot;</span><span class="p">}};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">idformat</span> <span class="o">=</span> <span class="s2">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">idformat</span> <span class="o">=</span> <span class="nx">idformat</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;select st_asgeojson(shape) as geojson from ne_countries where iso_a3 = &quot;</span> <span class="o">+</span> <span class="nx">idformat</span> <span class="o">+</span> <span class="s2">&quot;;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retval</span> <span class="o">=</span> <span class="s2">&quot;no data&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;No data found&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;feature&quot;</span><span class="p">,</span> <span class="nx">crs</span><span class="o">:</span> <span class="nx">crsobj</span><span class="p">,</span> <span class="nx">geometry</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">geojson</span><span class="p">),</span> <span class="nx">properties</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;iso&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="s2">&quot;representation&quot;</span><span class="o">:</span> <span class="s2">&quot;boundary&quot;</span><span class="p">}});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">polygonSrid</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="nx">conString</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">crsobj</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;urn:ogc:def:crs:EPSG:6.3:&quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">srid</span><span class="p">}};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">idformat</span> <span class="o">=</span> <span class="s2">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">idformat</span> <span class="o">=</span> <span class="nx">idformat</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;select st_asgeojson(st_transform(shape, &quot;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">srid</span> <span class="o">+</span> <span class="s2">&quot;)) as geojson from ne_countries where iso_a3 = &quot;</span> <span class="o">+</span> <span class="nx">idformat</span> <span class="o">+</span> <span class="s2">&quot;;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retval</span> <span class="o">=</span> <span class="s2">&quot;no data&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;No data found&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;feature&quot;</span><span class="p">,</span><span class="nx">crs</span><span class="o">:</span> <span class="nx">crsobj</span><span class="p">,</span> <span class="nx">geometry</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">geojson</span><span class="p">),</span> <span class="nx">properties</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;iso&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="s2">&quot;representation&quot;</span><span class="o">:</span> <span class="s2">&quot;boundary&quot;</span><span class="p">}});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The PostGIS spatial SQL for each function is shown in the &#8220;client.query&#8221; calls in the code above. This approach is very similar to constructing SQL calls in a number of other application environments. You will notice that a coordinate reference system object is constructed and attached to each valid response, which is structured as a <a href="http://geojson.org">GeoJSON</a> feature. The code currently assumes EPSG codes but that may be addressed in a future version.</p>

<p>The above modules do most of the heavy lifting. The full code for this sample <a href="https://github.com/geobabbler/geo-service">is available here</a>.</p>

<p>To test the application, simply issue the following command in a terminal:</p>

<p><em>node server.js</em> (this assumes you are running from the same directory in which server.js resides. The file extension is optional.</p>

<p>Your web application is now listening on port 3000. In a browser, visit the following URL:</p>

<p><em>http://localhost:3000/countries/irl/bbox</em></p>

<p>This should return a GeoJSON feature representing the bounding box of Ireland in WGS84. You can then test the other three calls with appropriate parameters. To get the bounding box in Web Mercator, go to:</p>

<p><em>http://localhost:3000/countries/irl/bbox/3785</em></p>

<p><strong>Deploying the Application</strong></p>

<p>The application should now be ready to deploy. In my case, I created an Ubuntu EC2 instance (free tier). Using SSH, I made sure Node and git were installed on the machine. Additionally, I installed <a href="https://github.com/nodejitsu/forever">Forever</a> which allows a Node application to run continuously (similar to a service on Windows). This can also be done using an upstart script but I chose Forever. I may switch to using <a href="http://devo.ps/blog/2013/06/26/goodbye-node-forever-hello-pm2.html">PM2</a> at some point.</p>

<p>Now, it&#8217;s simply matter of installing the application code to the instance via git, wget, or the method of your choice. Once installed, be sure to go to the folder containing the code and issue the &#8220;npm install&#8221; command. This will read the package.json install Express, node-postgres, and other dependencies. Since some native code is built in the process, you may need to issue the command under sudo.</p>

<p>I mentioned above that the application listens on port 3000. The Ubuntu instance, by default, will not allow the application to listen on port 80. This can be mitigated in a number of ways but I issued the following command to redirect traffic from 80 to 3000. Since this instance is single-use, this approach is sufficient.</p>

<p><em>sudo iptables -t nat -A PREROUTING -p tcp &#8211;dport 80 -j REDIRECT &#8211;to-ports 3000</em></p>

<p>Once you are ready to go, you&#8217;ll want to start the application with the following command:</p>

<p><em>forever start server</em> (again assuming you are executing from the directory containing server.js)</p>

<p>A couple of Amazon notes: 1) You may want to assign an elastic IP to your instance for a persistent IP address and 2) you&#8217;ll want you remember to configure your RDS security group to allow access from your instance&#8217;s IP address.</p>

<p><strong>Conclusion</strong></p>

<p>If everything has gone correctly, you should be able to execute the above URLs (using your instance IP address) and get a response like the following, which you should be able to load directly into QGIS or another GeoJSON-literate client. Altogether, I was able to assemble this in one evening. This small collection of open-source tools, combined with the Amazon infrastructure, seems to provide a straightforward path to a hosted geodata service. This example is intentionally simple but PostGIS provides a robust collection of functions that can be exploited in a similar manner, leading to more advanced processing or analysis. I will continue my experimentation but am encouraged by what I have seen so far.</p>

<p><strong>Sample Response</strong></p>

<figure class='code'><figcaption><span>irl_bbox.json </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;feature&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;crs&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;urn:ogc:def:crs:EPSG:6.3:4326&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;geometry&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Polygon&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;coordinates&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="mf">-10.4781794909999</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">51.4457054710001</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="mf">-10.4781794909999</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">55.386379299</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="mf">-5.99351966099994</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">55.386379299</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="mf">-5.99351966099994</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">51.4457054710001</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="mf">-10.4781794909999</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">51.4457054710001</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;iso&quot;</span><span class="p">:</span> <span class="s2">&quot;irl&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;representation&quot;</span><span class="p">:</span> <span class="s2">&quot;extent&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consider the 'Alternative']]></title>
    <link href="http://blog.geomusings.com/2013/11/27/consider-the-alternative/"/>
    <updated>2013-11-27T13:01:00-05:00</updated>
    <id>http://blog.geomusings.com/2013/11/27/consider-the-alternative</id>
    <content type="html"><![CDATA[<p>When I was in college, I had a psychology professor who posited that you could train a cat (a dodgy proposition at best) to take a circuitous route to its food bowl by only rewarding that behavior. He was clearly a behaviorist and was convinced that you could completely condition the instinct to go straight to the food bowl out of the cat. To my knowledge, this professor did not own a cat and never attempted to test his assertion.</p>

<p>I was reminded of this after reading my friend Atanas Entchev&#8217;s <a href="http://blog.entchev.com/2013/11/22/some-post-postgis-day-thoughts.aspx">post in reaction</a> to the <a href="http://postgis.net">PostGIS</a> Day <a href="http://www.spatiallyadjusted.com/2013/11/21/todays-hangout-postgis-day-extravaganza-panel/">hangout panel discussion</a>. In his post, <a href="http://twiiter.com/atanas">Atanas</a> describes difficulty in convincing customers to consider open-source geospatial tools. These customers and prospects are comfortable with their proprietary tools and associated workflows and are reluctant to consider switching. I have encountered this attitude many times myself so I take no issue with the observation. Barriers to exit are real considerations, regardless of the new technology being considered. Organizations align themselves around their tools to achieve maximum efficiency with them. I discussed these issues at a talk I gave last year to the <a href="https://njgin.state.nj.us/OIT_NJGF/index.jsp">New Jersey Geospatial Forum</a> about how organizations can extend their existing geospatial technology investments with open-source technologies. These issues are very real for any organization with a mature, extended investment in a particular technology stack.</p>

<p>Atanas went on to liken the attitude to that with which some people view alternative medicine and I can see his point. Traditional GIS has set itself apart from the rest of the technology world for so long that users are generally conditioned to believe that GIS workflows should involve a series of <a href="http://en.wikipedia.org/wiki/Rube_Goldberg">Rube Goldberg</a> machinations involving file-based data sets, some proprietary scripting, and possibly some application-level business logic to relate and/or join data as necessary. This has taken various forms over the years but diagrams of those workflows tend to look the same.</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/geo_model.png" /></p>

<!--more-->


<p>Standing in contrast to such things, PostGIS looks alien, or &#8220;alternative.&#8221; In truth, it is not &#8220;alternative&#8221; but rather &#8220;standard.&#8221; As an example, here is <a href="http://blog.geomusings.com/assets/demos/nbi/">a map I produced a few weeks ago</a> showing the average ages of bridges by county. (I am not a cartographer.) It is a simple aggregation of the <a href="http://www.fhwa.dot.gov/bridge/nbi.cfm">National Bridge Inventory</a>, which consists of tens of thousands of records by county (3100-ish records). All of the data processing was done in PostgreSQL/PostGIS using nothing more exotic than SQL aggregate functions and some joins. None of the operations took longer than 6 seconds on my very pedestrian laptop. When I was done, I used QGIS to play with visualization and then dump out the static GeoJSON for use in Leaflet.</p>

<p>For my many friends who are regular users of PostGIS, this is nothing exotic. For some of my friends who regularly use commercial tools, this is interesting but not earth-shattering. But for a large portion of my friends who are comfortable with traditional tools and workflows, the time-to-market for this effort (35 minutes from the time I downloaded the NBI to the time I pushed the map to GitHub) has them taking notice. This entire workflow involved SQL extended with OGC-compliant spatial objects. (Side note: I have been hard on OGC&#8217;s web efforts but the Simple Features Specification has been a quiet workhorse across the geospatial industry for over a decade. It&#8217;s a good example of the benefit that well-designed standards can provide.) The map is being served from static content over simple HTTP with some client-side Javascript handling visualization. No heavy APIs or middleware involved or needed. The QGIS part was really necessitated by own cartographic limitations, but I could have fully generated the GeoJSON from SQL as well.</p>

<p>This example is fairly simplistic but I have good friends that are using PostGIS, and nothing more, to perform analyses and produce results for decision makers while sitting in meetings. This type of turnaround is standard in other market segments and the geospatial industry should expect nothing less. It requires nothing more than a strong foundation in SQL, mastery of spatial processes, and detailed understanding of your own data.</p>

<p>So I have come to realize that the mainstream GIS community has become very much like my professor&#8217;s theoretical cat; conditioned to take the long way to the end result when more direct paths are clearly available. What&#8217;s more, they have become conditioned to think of such approaches as normal. Geospatial analytical operations can be very complex and the approaches to performing them were, in the past, necessarily convoluted due to the lack of understanding of spatial data types and operations within mainstream platforms. Those barriers have been rapidly disappearing over the past decade or so, but the user community has been slow to let go of its comfort with familiar tools and convoluted approaches. As I stated above, organizational barriers to exit are real considerations, but the inherent efficiencies available in modern geospatial tools such as PostGIS make the transition worth the effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS Day After]]></title>
    <link href="http://blog.geomusings.com/2013/11/19/gis-day-after/"/>
    <updated>2013-11-19T09:13:00-05:00</updated>
    <id>http://blog.geomusings.com/2013/11/19/gis-day-after</id>
    <content type="html"><![CDATA[<p>It&#8217;s the morning of November 21st, but not for long. You open one eye. Just one; it&#8217;s best not to rush such things. Apparently, you finally came to rest in the ball pit you all made using the squishy globes from myriad conferences past. A cursory scan tells you the GIS lab is trashed. It starts to come back to you: the rousing game of &#8220;Pin the Certificate on the Khakis.&#8221; Yes, there are your pleated khakis on the wall with everyone&#8217;s training and GISP certificates stuck on or around them with pushpins. Someone won in what would have been a most painful way if the khakis had been on your body. The loin cloth fashioned from the old hard-copy topos (which you are still wearing). The fact that you let the intern talk you into finally opening a Twitter account and your glee at discovering you could attach photos to geocoded tweets with your BlackBerry.</p>

<p>You look around the room at your coworkers strewn across the floor. There&#8217;s the ArcObjects guy still sporting his &#8220;war paint&#8221; from the plotter toner. There&#8217;s your lead analyst with a face tattoo of the town&#8217;s land-use drawn in marker and, she proudly insisted, accurately projected in state plane. Slowly, you are able to account for everyone on your GIS staff. Good, no one has gone missing&#8230;except the intern.</p>

<p>The door opens and you turn to see the intern standing there in all of her college-kid resilience, letting in far too much sunlight for your comfort. You&#8217;re not sure it&#8217;s possible to hate anyone more in this moment.</p>

<p>&#8220;Oh, good,&#8221; she says, &#8220;you&#8217;re awake. Are you going to do the hangout?&#8221;</p>

<p>&#8220;Hangout?&#8221; you mumble.</p>

<p>&#8220;Yeah, <a href="http://www.spatiallyadjusted.com/2013/11/18/postgis-day-special-hangout-this-week/">James Fee is doing a PostGIS Day hangout with a panel of experts on PostGIS</a>. I told you about this. I told you about <a href="http://postgis.net">PostGIS</a>. Don&#8217;t you remember? It starts in about an hour.&#8221;</p>

<p>It does sound familiar. You give it some thought. What better way to shake off the cobwebs from the bacchanalia of the &#8220;BEST GIS DAY EVAR!!!&#8221; (so says the hand-lettered Sharpie on the lab&#8217;s wall) than a little geo-hair-of-the-dog? Maybe it&#8217;s time to finally pay attention to this open-source stuff. You look around to survey the damage one more time. Besides, ditching the Oracle license might just about pay for this.</p>

<p>&#8220;Yeah,&#8221; you reply, &#8220;I&#8217;ll be there in five minutes. Close the door, please.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desktop Not Dead]]></title>
    <link href="http://blog.geomusings.com/2013/10/23/desktop-not-dead/"/>
    <updated>2013-10-23T09:42:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/10/23/desktop-not-dead</id>
    <content type="html"><![CDATA[<p>In 2011, I gave a talk at the NCGIS conference about the continued dominance of the desktop in the world of GIS. In that talk, my main point was that, regardless of the ultimate destination of GIS data or maps (cloud, server, paper, PDF, etc.), most GIS data passes through a desktop GIS at some point. I don&#8217;t have hard data to back up that claim but I think anyone who has worked in the industry for any length of time will agree that it feels right. If we loosely define &#8220;desktop GIS&#8221; to include not only GUI analytical tools like <a href="http://www.esri.com">ArcMap</a> or <a href="http://qgis.org">QGIS</a>, but also command-line tools such as <a href="http://www.gdal.org/">GDAL/OGR</a> and cartographic tools such as <a href="https://www.mapbox.com/tilemill/">TileMill</a>, I think the statement is even more comfortable.</p>

<p style="text-align:center;"><iframe width="560" height="420" src="http://www.youtube.com/embed/ljIQo1OHkTI?color=white&theme=light"></iframe></p>

<p>Essentially, my claim was that desktop GIS is still the onramp for most of the data we interact with on the web. Over the past few years, geographically tagged live and temporally-sensitive data streams have increased in importance but I think most geospatial data still starts as traditional data sources (rasters, vectors, terrain, etc.) that pass through a desktop for analysis, processing, and styling before moving on to the web. Esri, for example, still features its desktop tools as prominent parts of its web publishing workflow and <a href="http://boundlessgeo.com/">Boundless</a> is working on a <a href="https://github.com/boundlessgeo/suite-qgis-plugin">similar path for QGIS</a>.</p>

<!--more-->


<p>The announcement of a Google Maps Engine connector for both <a href="https://github.com/googlemaps/mapsengine-arcgis-connector">ArcGIS</a> and <a href="https://github.com/googlemaps/mapsengine-qgis-connector">QGIS</a> is yet another example of the continued importance of the desktop in the GIS world. Simply put, the chances of a user choosing your platform increases if you can cut to the front of the line and present yourself in their desktop environment. <a href="http://blogs.esri.com/esri/arcgis/2013/10/22/googles-arcgis-toolbar-for-the-cloud/">Andrew Turner did a nice summary of many such integration efforts</a> involving ArcGIS Desktop, although the post fails to mention <a href="http://www.arc2earth.com">Arc2Earth</a>, which I consider the most comprehensive extension of its kind on the market. His discussion tracks with my personal experience in recent years. My most public activities have been <a href="https://code.google.com/p/ziggis/">zigGIS</a>, the <a href="http://blog.dc.esri.com/2010/11/22/toolbars-for-geocommons-and-geoiq/">GeoCommons toolbars</a> (thanks for the mention, Andrew), and the <a href="http://www.weogeo.com">WeoGeo</a> toolbar. I&#8217;ve also built a couple of others for organizations that wanted to get their data products in front of ArcGIS users easily and I am currently working on a live feed extension for a government user. The reality is that I&#8217;ve done more desktop development in the last three years than I had done in the preceding ten.</p>

<p>Andrew&#8217;s point at the end of his post about Esri&#8217;s extensibility through various means is quite true. As much as developers love to complain about ArcGIS Desktop and ArcObjects (myself included), I have yet to find a data source that I couldn&#8217;t integrate using those tools. As I dig into the APIs behind QGIS, I am finding the same to be true there. Despite the tendency to downplay desktop GIS tools these days, I see them continuing to play a significant, if quiet, role in defining how we interact with maps and geospatial data across all platforms for the foreseeable future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WeoGeo: Now With GeoJSON]]></title>
    <link href="http://blog.geomusings.com/2013/10/17/weogeo-now-with-geojson/"/>
    <updated>2013-10-17T05:42:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/10/17/weogeo-now-with-geojson</id>
    <content type="html"><![CDATA[<p>It&#8217;s great news that the <a href="http://www.washingtonpost.com/politics/house-effort-to-end-fiscal-crisis-collapses-leaving-senate-to-forge-last-minute-solution/2013/10/16/1e8bb150-364d-11e3-be86-6aeaa439845b_story.html?hpid=z1">government shutdown is finally over</a>. Many of our colleagues across the geospatial industry can now report back to work, ending a another stressful period for them. During the shutdown, many stepped up to try and fill the gap left by shuttered government web sites that would normally distribute geospatial data.</p>

<p>Among those who stepped into the breach are my friends at <a href="http://www.weogeo.com">WeoGeo</a>, who told me they saw a huge uptick in traffic as the community realized that government data sets such as TIGER and DRG are freely available in the <a href="http://market.weogeo.com/">WeoGeo Market</a>. One of the capabilities that has been quietly introduced into WeoGeo&#8217;s platform over the last few days is the ability to extract and download TIGER and OSM data directly in <a href="http://geojson.org">GeoJSON</a> format. The embedded video by WeoGeo walks through the customization and ordering process better than I can, but it&#8217;s great to have the ability to extract fine-tuned data sets directly in GeoJSON format for use in modern web-mapping tools.</p>

<iframe src="http://fast.wistia.net/embed/iframe/vth8yo4cnz"
allowtransparency="true" frameborder="0" scrolling="no"
class="wistia_embed" name="wistia_embed" allowfullscreen
mozallowfullscreen webkitallowfullscreen oallowfullscreen
msallowfullscreen width="770" height="433"></iframe>


<br/>


<p>Static content has been making a comeback lately, and justifiably so. The truth is that most of the content we interact with on the web won&#8217;t change over time and complex content management systems (CMS) that dynamically generate HTML and such from databases on every call are really overkill. Sure, there are caching strategies and CDNs and such to hide some of the misery but you can&#8217;t beat the speed, simplicity, and scalability of static content.</p>

<!--more-->


<p>The same can really be said of maps on the web. Most maps are published to convey some information that has been validated for the point in time in which it was published. Most of the organizations I&#8217;ve worked with, government and commercial, have a release process to vet the contents of a map before it is published. In effect, such organizations are making their map content static. The truth is that, like a CMS, a complex map server probably isn&#8217;t necessary for most maps we interact with today on the web.</p>

<p>In fact, I can still clearly recall use cases from just a few years where such architectures were not only overkill but counterproductive. We typically distributed analysis results via web-based interactive maps. The results were typically valid for point in time during which an area of interest was studied. We ended up developing versioning schemes to preserve analysis results from being altered by the next bulk data set update. Another tack was to set up a separate map service pointed at a directory of shapefiles. All of this was to get around the basic fact that geospatial data at the time was not web-ready. GeoJSON helps solve that problem.</p>

<p>With modern client-side mapping libraries like <a href="http://leafletjs.com/">Leaflet</a> and <a href="http://www.openlayers.org/">OpenLayers</a>, and with content generation tools like TileMill, it has become increasingly easy to make beautiful, interactive web maps that require no specialized back-end server to deliver geospatial content. With WeoGeo&#8217;s support, combined with the online editing capabilities of <a href="http://geojson.io/">geojson.io</a> from <a href="http://mapbox.com">MapBox</a>, the validation capability of <a href="http://geojsonlint.com/">GeoJSONLint</a> by <a href="http://twitter.com/JCSanford">Jason Sanford</a>, the <a href="https://help.github.com/articles/mapping-geojson-files-on-github">simple hosting capability of GitHub</a>, and the extended query API provided by <a href="http://gitspatial.com/">GitSpatial</a> (again by Jason Sanford), we are very close to having a complete GeoJSON-centric workflow.</p>

<p>Even as government data sites come back online, there are still good reasons to head over to WeoGeo and check out what they have. The customization capabilities alone (shown in the video above) make it very easy to get data for just your area of interest without having to download a lot of extra, unneeded data. The addition of GeoJSON support, in my opinion, shortens the workflow needed to get from data to information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maryland Department of Planning Bundles Property Data with QGIS]]></title>
    <link href="http://blog.geomusings.com/2013/10/07/maryland-department-of-planning-bundles-property-data-with-qgis/"/>
    <updated>2013-10-07T12:38:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/10/07/maryland-department-of-planning-bundles-property-data-with-qgis</id>
    <content type="html"><![CDATA[<p>This past week, I got an e-mail from Jim Cannistra, Director of Data Planning Services and the <a href="http://www.mdp.state.md.us/home.shtml">Maryland Department of Planning</a> (MDP), alerting me to a new product available from MDP called <a href="http://www.mdp.state.md.us/OurProducts/PropertyMapProducts/FINDERProduct.shtml">FINDER Quantum</a>. This product bundles Maryland property data and related products with <a href="http://qgis.org">QGIS</a> software to provide users with a fully-functional, free-standing system for interacting with the data. It is designed to replace an older, custom software product, capitalizing on an industry-standard open-source system.</p>

<!--more-->


<p>From the MDP site, the bundled data includes:</p>

<blockquote cite="http://www.mdp.state.md.us/OurProducts/PropertyMapProducts/FINDERProduct.shtml">The product DVD includes the State&#8217;s computerized property (tax) maps; the x,y linkages (point or polygon) to the Parcel, Computer Assisted Mass Appraisal (CAMA) and Sale datasets; Parcel, CAMA and Sale data, including Sale data via download from the Subscriber Website, from the Maryland State Department of Assessments and Taxation (SDAT); reference grids including a grid for the property (tax) maps, an ADC map book grid, a grid for the Maryland State Highway Administration (SHA) road, stream and feature maps and a grid for USGS 7.5&#8217; Topographical quad maps; and additional SHA files including a digital centerline roads file, data derived from SHA digital grid maps, an SHA major roads file and a county boundary file.<br/>
<br/>
Also included are land use/land cover data; congressional and legislative district boundary files; census geography and census demographic data; ZIP code boundary files; Priority Funding Area (PFA) designations; floodplain data, including DFIRM data for selected jurisdictions; protected lands boundaries; watershed data; generalized zoning designations; sewer service area boundaries; public water service area boundaries for selected jurisdictions; National Register of Historic Places (NRHP) Maryland coverage; residential Sales x,y point and summary files derived from SDAT Parcel and Sale data; large-scale, high resolution color digital-ortho imagery and a custom Quantum GIS project file (.qgs).</blockquote>


<p>The MDP site indicates there is a <a href="http://www.mdp.state.md.us/pdf/OurProducts/PropertyMapProducts/Finder/CstFnd.pdf">licensing fee</a> (PDF), which I assume is to cover the management of the data sets and the <a href="http://www.mdp.state.md.us/pdf/OurProducts/PropertyMapProducts/Finder/LicFnd.pdf">license agreement</a>, while acknowledging the GPL license of QGIS itself, seems to place the actual FINDER extension itself outide of any open-source license. (I am not a lawyer so I&#8217;ll accept guidance on that interpretation.) That said, bundling QGIS with data that the statewide user community values and an application to help exploit it is a great way to get more users on board with QGIS.</p>

<p>To that end, users that choose to take advantage of FINDER Quantum will want to keep in mind that great <a href="http://www.esrgc.org/training/">QGIS-related resources</a> are available via <a href="http://www.salisbury.edu/geography/">Salisbury State University</a> and that training is also available from <a href="http://www.linkedin.com/profile/view?id=14036437">Randal Hale</a> of <a href="http://www.northrivergeographic.com/introduction-to-quantum-gis">North River Geographics</a>. Once you have this powerful application installed, you can start to tap into a <a href="http://boundlessgeo.com/solutions/solutions-software/quantum-gis/">deep pool</a> of <a href="http://www.osgeo.org/search_profile">resources</a> to build your expertise.</p>

<p>So kudos to MDP for bundling their data with a powerful mapping, visualization, and analysis tool in QGIS. I hope that, in the near future, MDP considers making the FINDER application itself open-source but this is a great first step.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Come Sling Code With Us]]></title>
    <link href="http://blog.geomusings.com/2013/09/20/come-sling-code-with-us/"/>
    <updated>2013-09-20T09:57:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/09/20/come-sling-code-with-us</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a pretty good week for us at <a href="http://www.zekiah.com">Zekiah</a>. We announced two new <a href="http://www.zekiah.com/index.php?q=press/2013/09/16/zekiah-technologies-inc-wins-marine-corps-logistics-support-services-mclogss-contra">contract</a> <a href="http://www.zekiah.com/index.php?q=press/2013/09/16/zekiah-technologies-inc-awarded-contract-mission-assurance-division">wins</a> and I&#8217;m pleased to say that we&#8217;re not done yet. After final paperwork is done, we should be able to announce a couple more. These are the things that make small-business ownership worthwhile: doing good work, building relationships with our customers and then leveraging our track record to be able to work with new customers. Project execution and business development help us build the foundation necessary to be a good place for our employees to work and we try hard every day to make sure that we are such a place.</p>

<p>The second contract win we announced this week, with the US Navy&#8217;s Mission Assurance Division in Dahlgren, Virginia, is particularly fulfilling for us because we have worked side-by-side with that organization since the late 1990&#8217;s, doing challenging work in the areas of infrastructure protection and situational awareness during that time. We have literally grown and evolved alongside them over that time.</p>

<p>I typically try not to mix my blog with the daily operational aspects of my work at Zekiah. Usually, my work comes through in abstracted form in various posts, although many posts actually reflect my own personal experimentation and side projects. I&#8217;m stepping outside of that practice today to say that our latest contract win has given us <a href="http://www.zekiah.com/index.php?q=careers/openings/gis-software-developer-ii">an opening for a software developer</a> to come work with us at the Mission Assurance Division.</p>

<div style="text-align: center;"><img src="http://blog.geomusings.com/images/posts/desk.jpg" /><div style="text-align: center;font-size: 14px;">Can you bring this workstation to life?</div></div>


<br />




<!--more-->


<p>This is an immediate opening and you would be performing .Net development with the full range of Microsoft and Esri technologies. The work has been challenging and is mission-essential for not only our customer but their sponsors as well. The work would require you to be on-site full time but you would be working with one of the most talented teams of developers, both government and contractor, with which I have ever been associated. This is a group from which I have learned a great deal and still do. This specific position is not for someone who is particularly senior but it is also not entry-level either. It&#8217;s a great opportunity to grow a career that&#8217;s underway and picking up steam.</p>

<p>You can get some details by checking out the <a href="http://www.zekiah.com/index.php?q=careers/openings/gis-software-developer-ii">offical job posting</a>, where you can also apply online. Most of that language is pulled directly from the description in the contract. If you want to get an idea of what the day-to-day work looks like, <a href="http://blog.geomusings.com/about/">you can always contact me directly</a>. I will draw your attention to one requirement, however: &#8220;Active security clearance or the ability to obtain a security clearance.&#8221; What that means is that we can&#8217;t entertain staffing via offshoring, nor can we consider applicants who do not hold US citizenship. I bring that up only because everyone&#8217;s time is valuable and I&#8217;d hate for you to waste your time applying if we can&#8217;t consider you.</p>

<p>So, if you&#8217;re looking for the next challenge in your career and want to work with a great team, please send us your vitals. Some of the best and most meaningful work I&#8217;ve done in my career was done supporting this customer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Look at GIS StackExchange]]></title>
    <link href="http://blog.geomusings.com/2013/09/12/another-look-at-gis-stackexchange/"/>
    <updated>2013-09-12T11:10:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/09/12/another-look-at-gis-stackexchange</id>
    <content type="html"><![CDATA[<p>A year ago, I used the StackExchange API to facilitate an <a href="http://blog.geomusings.com/2012/09/13/carving-up-gis-stackexchange/">analysis of tags on GIS StackExchange</a> to see what people were talking about on one of the largest and most successful vendor-neutral discussion sites in our industry. In that post, I stated &#8220;It would probably be good to revisit this in a year to see how things have changed, if at all.&#8221;</p>

<p>Well, a year has passed so I decided to do it again. I used the same scripts and approach I used last time in order to be consistent. Since this is one year later, there is one key caveat. My analysis last year looked at the top 100 tags since the start of the <a href="http://gis.stackexchange.com/">GIS StackExchange</a> site. Since I ran the same query this year, the new results are compounded so what they so are last year&#8217;s results plus activity since then. Essentially, you are looking at &#8220;that plus this.&#8221; The pie chart below shows the breakdown.</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/stackexchange_chart_2013.png" /></p>

<!--more-->


<p>Compared to last year&#8217;s results, there hasn&#8217;t been much movement in the distribution of tags. One thing I did notice, however is that the tag &#8220;qgis&#8221; leaped to the top of the list. Last year, &#8220;arcgis&#8221; was the top tag and &#8220;qgis&#8221; was number three. That said, I wouldn&#8217;t jump to too many conclusions. A quick <a href="http://blog.geomusings.com/assets/data/stack2013/output_2013.csv">look at the data</a> shows that, in addition to &#8220;arcgis&#8221;, there are version-specific tags such as &#8220;arcgis-10.0&#8221; and &#8220;arcgis-10.1&#8221; as well as product-specific tags like &#8220;arcgis-server&#8221; so there&#8217;s a lot of Esri-centric discussion going on, but that is to be expected. The top ten tags, however, include major components of the <a href="http://opengeo.org/">OpenGeo</a> Suite (OpenLayers, GeoServer, PostGIS) in addition to QGIS so open-source tools seem to be every bit as active a topic of discussion as do <a href="http://www.esri.com">Esri</a> tools.</p>

<p>Speaking of the top ten tags, they were: <br /><br />
1. qgis (3910) <br />
2. arcgis (2382) <br />
3. python (2171) <br />
4. arcgis-10.0 (2142) <br />
5. openlayers (1996) <br />
6. postgis (1560) <br />
7. geoserver (1193) <br />
8. arcobjects (1184) <br />
9. raster (1174) <br />
10. arcmap (1113) <br /></p>

<p>Last year, I got some back-channel requests to do a little more with the raw data so, seeing a chance to play with <a href="http://d3js.org">D3</a>, here is a look at how things break down. Hover over a bubble to see the full name and tag count. If you follow your nose a bit, the color scheme will become apparent in relation to the pie chart&#8217;s key.</p>

<p><link rel="stylesheet" href="http://blog.geomusings.com/assets/data/stack2013/style.css" /></p>

<iframe src="http://blog.geomusings.com/assets/data/stack2013/frame.html" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<p>All of the same limitations I pointed out last year about posts having multiple tags and dilution across related tags still apply this year. If there is any insight into the mind share of the GIS community to be derived from this exercise, it is probably in the aggregate.</p>

<p>The exact StackExchange API URL that generated these results is: <a href="https://api.stackexchange.com/2.1/tags?order=desc&amp;sort=popular&amp;site=gis&amp;pagesize=100">https://api.stackexchange.com/2.1/tags?order=desc&amp;sort=popular&amp;site=gis&amp;pagesize=100</a></p>

<p>The results were generated on 11 September 2013 and subsequent results will vary from those shown here. The Python script used to process the results into CSV <a href="http://blog.geomusings.com/assets/data/stack2013/handle_json.zip">can be found here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Geospatial Stuff]]></title>
    <link href="http://blog.geomusings.com/2013/09/10/random-geospatial-grab-bag/"/>
    <updated>2013-09-10T10:16:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/09/10/random-geospatial-grab-bag</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a while since I&#8217;ve posted as the usual wind-down of summer and wind-up of the school year has had me otherwise engaged. What follows are few developments over the past few months that have floated through the transom of my geo-awareness.</p>

<p style="text-align:center;"><img src="http://daylightdonutsstier.com/assets/images/slideshow/CakeDonuts.jpg" height="50%" width="50%"/></p>

<p><a href="http://geojson.io/">geojson.io</a> - Remember all of the attention given to the ability to render GitHub-hosted GeoJSON files as maps? Well, <a href="http://twitter.com/tmcw">Tom MacWright</a> of <a href="http://mapbox.com">MapBox</a> has, in fairly rapid fashion, given us this tool to edit GeoJSON in the browser and publish to either a GitHub repo or a gist. It&#8217;s an easy-to-use tool with an interface consistent with other MapBox tools. It&#8217;s definitely worth checking out and adds an important piece of workflow to the GeoJSON-on-GitHub concept.</p>

<!--more-->


<p><a href="http://gitspatial.com/">GitSpatial</a> - Continuing with the theme of being more productive with GeoJSON on GitHub, <a href="http://twitter.com/JCSanford">Jason Sanford</a> has developed GitSpatial to wrap a spatial API around your hosted GeoJSON. It actually works using a &#8216;sync&#8217; approach so it pulls the GeoJSON into its own infrastructure and watchs the data on GitHub for changes. Jason has also updated his <a href="http://geojason.info/leaflet-vector-layers/">Leaflet Vector Layers</a> project to support GitSpatial. This project is in its early stages and Jason has been very open to feedback. I encourage you to check it out and help him make it better.</p>

<p><a href="https://www.gaia-gis.it/fossil/virtualpg/index">VirtualPG</a> - This extension to SQLite/SpatiaLite was released in August and it is intended to facilitate data exchange between those platforms and PostgreSQL/PostGIS. I have yet to kick the tires on it but I plan to soon.</p>

<p><a href="http://www.dhs.gov/infrastructure-information-partnerships#2">HSIP 2013</a> - For the first time in quite a while, I attended a <a href="https://www.hifldwg.org/">HIFLD</a> meeting. The theme of the meeting was HSIP Feedback, to which about one HIFLD per year is dedicated. While HSIP has never been perfect, it has managed to evolve to provide value across numerous communities. The meeting featured a parade of users articulating the essential nature of HSIP to their missions. With HSIP 2013, the distribution expands to 6 DVDs. In my opinion, this distribution method is one of its biggest, and most solvable, problems. With a plethora of <a href="http://www.weogeo.com">technologies</a> to choose from, streamlining and tailoring the delivery of HSIP to its users should be low-hanging fruit for HSIP&#8217;s custodians.</p>

<p>As for me, I&#8217;ve been spending my days writing interfaces for custom message formats to synchronize locations with video frames. It&#8217;s much lower-level development than I&#8217;ve done in a while but it&#8217;s been very fun. I&#8217;ve also been making some updates to my <a href="https://github.com/geobabbler/AGSOpenFormats">GeoJSON extension for ArcGIS Server</a> but I&#8217;ll post about that in more detail soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Do I Blog?]]></title>
    <link href="http://blog.geomusings.com/2013/08/12/why-do-i-blog/"/>
    <updated>2013-08-12T12:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/08/12/why-do-i-blog</id>
    <content type="html"><![CDATA[<h2>TL;DR:</h2>

<p>In which, as a result of a <a href="http://blog.entchev.com/2013/08/08/gis-blogging-in-decline.aspx">post by Atanas Entchev</a>, I postulate on why I continue to do this blog thing. This is a departure from my typical subject matter and you can be forgiven for not reading any further.</p>

<hr />

<p>My friend <a href="http://twitter.com/atanas">Atanas Entchev&#8217;s</a> <a href="http://blog.entchev.com/2013/08/08/gis-blogging-in-decline.aspx">latest post</a> on a possible decline in GIS blogging got me looking at my own output. After and initial surge, I have held steady at 40 to 45 posts per year. The discussion around Atanas&#8217; post, both in his blog comments and on his <a href="https://plus.google.com/110319601981109631300/posts/A3twyjrs8yL">Google+ stream</a>, got me thinking about why I continue to do this. So, at the risk of being accused of engaging in philosophical navel-gazing, here it goes.</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/posts.png" /></p>

<p>This blog was not my first attempt at blogging. I originally had an <a href="http://www.esri.com">ESRI</a>-development focused blog on Blogger in about 2004. I think I made four or five posts, let it languish for a bit, and then killed it off. The main reason for that is that I wasn&#8217;t really sure what I was trying to accomplish with a blog. I never even backed it up so whatever was there is lost to the ages.</p>

<!--more-->


<p>Fast-forward to 2006 when I was at a stage in my career where I was working at a fairly cloistered customer site, building a human resources management system&#8230;in VB.NET no less. It was the first time since the beginning of my career that I was away from the GIS industry and I wasn&#8217;t interested in letting my skills soften. Up until that point, I had been primarily an ESRI developer but I was now using evenings at home to do experimental stuff to keep current. My company machine had ArcMap on it but I wasn&#8217;t going to swing an SDE license at home so I started looking at <a href="http://www.postgis.org">PostGIS</a>. That&#8217;s when I ran across <a href="https://code.google.com/p/ziggis/">zigGIS</a> and used it to extend out of my ESRI comfort zone into the world of open-source GIS.</p>

<p>All of that lead me to start blogging. Initially, I was doing web searches to find out how to do things I was trying to with ArcObjects and PostGIS. I would occasionally find a post that provided a good overview of a coding techniques or an in-depth discussion of how a piece of software behaved, but they were few and far between. That&#8217;s when I finally had a concept for a blog: to write the kind of blog that I was looking for and would want to read. So my early posts featured a lot of code snippets and such (this was in the pre- <a href="https://gist.github.com/">Gist</a> days when sites like <a href="http://sourceforge.net/">SourceForge</a>, <a href="https://code.google.com/">Google Code</a> and <a href="https://www.codeplex.com/">CodePlex</a> were overkill for snippets). It also generally tracked my growing personal explorations with open-source tools.</p>

<p>So that&#8217;s how I got into blogging but the title of this post is really looking for the reasons why I keep doing it. I&#8217;ll summarize:</p>

<ol>
<li><p>To give back - Over the years, the snippets have gotten more sporadic but I still try to post some outputs of my work from time to time. I can&#8217;t really devote the time to jump into an open-source project with both feet so my hope is that my blog can be an avenue to contribute back some of the knowledge I derive from my work.</p></li>
<li><p>To engage - I am a consultant after all. I am able to continue to ply my trade by being known and my blog is one component of building the track record of my work. Due to vagaries of Federal contracts, much of my work remains behind firewalls so my blog is a way to demonstrate some of what I can do outside the standard Federal procurement process. I would also be remiss if I didn&#8217;t acknowledge that my blog has been an avenue by which I have met a number of people that I now consider friends. For fear of leaving someone out, I won&#8217;t enumerate them here but the act of writing my blog, and reading others, has helped me connect with a lot of people I am glad to know.</p></li>
<li><p>To act as my own resource - I have often gone back to mine old posts to find a technique I implemented in the past and bring it forward to my current work. So, while my blog is out there for the public to see, it has become something of my own personal archive as well. It remains to be seen whether <a href="https://github.com">GitHub</a> and Gist will put a dent in that use case.</p></li>
<li><p>To tidy up my own mind - It actually takes a lot of work to prepare a post, or at least it does for me. Oftentimes, I have a lot of &#8220;bit and pieces&#8221; floating around in my head and on various notepads and such. One of the attributes of working at multiple locations is that various pieces of related information can become scattered across separate e-mail systems, content management systems, notepads, post-its and the like. I can&#8217;t always have my smartphone with me or access my GMail, so some fragmentation can set in. Taking the time to write a post is an excellent way for me to pull together all of those disparate bits, organize them into a cohesive approach, and document that approach for others and for me (see item 3).</p></li>
<li><p>I am a writer - I used to write a lot of fiction and poetry. One day I may do so again. Until then, my blog scratches the itch for stringing some words together into something coherent.</p></li>
</ol>


<p>I remain committed to the idea of writing the kind of blog that I would want to read and I have tried to be consistent about that over the years. I am actually quite humbled that it seems to have found an audience, that anyone other than me reads it, and that others find value in it.</p>

<p>I can completely understand <a href="http://www.jonathancrowe.net/">Jonathan Crowe&#8217;s</a> decision to end his long-running, and excellent, blog <a href="http://www.maproomblog.com/2011/06/the_end.php">The Map Room</a>. Sometimes things just run their course. This much I can say: I won&#8217;t be ending mine in the near future. Late last year, I took the step of migrating my blog from Wordpress.com to a Jekyll/Octopress site hosted on GitHub pages. Extracting six years of content from Wordpress was no small task (thanks for the help, <a href="http://twitter.com/cageyjames">James</a>) so I did a gut check before moving forward. I decided that taking that step was a commitment to keep the blog going for the foreseeable future.</p>

<p>So back to Atanas&#8217; post: I do think GIS blogging, in the form it took when I started, is in decline. There were a lot of personal GIS blogs in 2006, many of which have fallen by the wayside. That&#8217;s probably true of blogs in general as social media platforms have eaten away at them. I don&#8217;t know that it&#8217;s a loss; I don&#8217;t know that it&#8217;s important at all. Human communication evolves over time. We just happen to be in a period where that process seems to be moving rapidly.</p>

<p>That said, some good individual blogs have popped up but I think blogging in general is becoming more polished and corporate. I think some of the better original content these days comes from multiple authors contributing to organizational blogs. In the geospatial industry, the <a href="http://www.mapbox.com/blog/">MapBox blog</a> stands out as this type of blog. Yes, the blog forwards the ends of MapBox but its content is genuinely useful to those trying to put MapBox to use. The same can be said of some of <a href="http://blogs.esri.com/esri/arcgis/">Esri&#8217;s blogs</a>, the content of which has shown marked improvement over the last 24 months or so.</p>

<p>Blogs can also help small companies establish their identity. At <a href="http://www.zekiah.com">my company</a>, we started a <a href="http://www.zekiah.com/index.php?q=blog">blog</a> a while back as a means to add fresh insights into our capabilities beyond the standard representation that most company web sites provide. Blogs are a nice long-form enhancement for organizations and I think they are safer because they minimize the risk misinterpretation that comes with a 140-character limit.</p>

<p>So that&#8217;s it. This is about as &#8220;meta&#8221; as I ever want to get on my blog. I don&#8217;t think I&#8217;ll do anything like this again because it smacks of philosophical navel-gazing. (I am usually my own harshest critic in that area.)  Thank you, as always, for stopping by.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpatiaLite and ArcGIS 10.2]]></title>
    <link href="http://blog.geomusings.com/2013/08/07/spatialite-and-arcgis-10-dot-2/"/>
    <updated>2013-08-07T12:35:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/08/07/spatialite-and-arcgis-10-dot-2</id>
    <content type="html"><![CDATA[<p>With the release of ArcGIS 10.2, <a href="http://www.esri.com">Esri</a> quietly added support for <a href="https://sqlite.org/">SQLite</a> as a geodatabase container. This is big news as the community has been looking for such support for some time. An open-source RDBMS originally designed for embedded systems, SQLite has a very small footprint and is <a href="https://www.sqlite.org/mostdeployed.html">arguably the most widely deployed RDBMS</a> in the world. (Thanks, in part, to the fact that it is embedded into Adobe Reader and other commonly used software.) Over the years numerous strategies for storing spatial data in SQLite have been developed, ranging from simply storing <a href="https://en.wikipedia.org/wiki/Well-known_text">WKT or WKB</a> geometries in a column up to full extensions like <a href="http://www.gaia-gis.it/gaia-sins/">SpatiaLite</a>, which adds OGC-compliant data types and methods. SQLite is also the engine that drives the popular <a href="http://www.mapbox.com/developers/mbtiles/">MBTiles</a> implementation used by <a href="http://www.mapbox.com/tilemill/">TileMill</a> and <a href="http://www.mapbox.com">MapBox</a>.</p>

<!--more-->


<p><a href="http://resources.arcgis.com/en/help/main/10.2/index.html#//019v0000001w000000">According to the documentation</a>, ArcGIS supports the use of either Esri&#8217;s ST_GEOMETRY or SpatiaLite data types for geometry storage. This is consistent with Esri&#8217;s approach on other RDBMS platforms such as <a href="http://www.postgresql.org">PostgreSQL</a> and <a href="http://www.oracle.com">Oracle</a>. While SpatiaLite has been supported by platforms such as <a href="http://qgis.org/">QGIS</a>, I can&#8217;t say I&#8217;ve seen a huge demand for data in SpatiaLite format. I have been using it for a while in some of <a href="http://www.zekiah.com">my company&#8217;s</a> data modeling work as we have a Federal customer that has a documented requirement for generation of physical models in SpatiaLite, among other platforms. We have also taken the step of supporting SQLite as a container for our <a href="http://www.zekiah.com/index.php?q=blog/topics/pim">platform independent model (PIM) approach</a> for configuration management of logical geospatial data models.</p>

<p>Esri&#8217;s new support of SpatiaLite, combined with my existing customer requirements, obviously sparked my interest so I was curious to kick the tires. Unfortunately, I also had the situation that my development environment for the PIM tools, due to current customer constraints, must remain at ArcGIS 10.1 for both the desktop software and the underlying ArcObjects libraries. I have not been able to carve out the time to build a 10.2 VM.</p>

<p>Luckily, others were also interested in the new SpatiaLite support so <a href="http://twitter.com/brymcbride">Bryan McBride</a>, &#8221;<a href="http://twitter.com/fathersandman">Father Sandman</a>,&#8221; and I were able to crowdsource some very cursory compatibility tests via Twitter. The full tweet stream can be accessed by clicking the date in the tweet below.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/billdollins">@billdollins</a> <a href="https://twitter.com/FatherSandman">@FatherSandman</a> Score! Looks like we&#39;ve confirmed ArcGIS 10.2, QGIS 1.9.0, and SpatiaLite-GUI 1.7.1 are compatible.</p>&mdash; Bryan McBride (@brymcbride) <a href="https://twitter.com/brymcbride/statuses/365103999671738369">August 7, 2013</a></blockquote>
<script async src="http://blog.geomusings.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>So, using Father Sandman&#8217;s existing 10.2 install, we were able to verify the following:</p>

<ol>
<li>A SpatiaLite database created in ArcGIS 10.2 can be accessed and viewed in QGIS 1.9.0 and SpatiaLite GUI 1.7.1</li>
<li>A SpatiaLite database created in QGIS 1.9.0 can be accessed in ArcGIS 10.2</li>
</ol>


<p>Obviously, some more rigorous tests need to be performed but the initial results are promising. I&#8217;m curious to explore the boundaries, in ArcGIS terms, between a SQLite geodatabase and a file geodatabase. It remains to be seen whether this will put a dent in the use of file geodatabases. If it happens at all, I think it will take time since SQLite is not on the radar of the vast majority of ArcGIS users. I would hope, at a minimum, it puts a final stake through the heart of the personal geodatabase. It could also drive explicit accreditation of SQLite/SpatiaLite tools on government systems, which would be nice.</p>

<p>I&#8217;m happy, and somewhat pleasantly surprised, to see Esri take this step and provide another open option for data exchange.</p>

<p>Now, about GeoJSON&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps for Geospatial Data]]></title>
    <link href="http://blog.geomusings.com/2013/07/28/devops-for-geospatial-data/"/>
    <updated>2013-07-28T10:54:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/07/28/devops-for-geospatial-data</id>
    <content type="html"><![CDATA[<p>There has been a bit of buzz the past couple of weeks over the <a href="https://github.com/blog/1541-geojson-rendering-improvements">ability of GitHub to render GeoJSON and TopoJSON files</a> automatically using  and embedded <a href="http://leafletjs.com/">Leaflet</a> map and <a href="http://www.mapbox.com/">MapBox</a> technology. This buzz is quite justified as it presents an easy way to simply publish and visualize vector data sets. In the weeks since the initial announcement, the community has begun exploring the limits of GitHub&#8217;s capability. Probably the two biggest limiting factors are individual file size limits and API rate limits. Some, including myself, are exploring strategies for maximizing the ability to store, disseminate, and visualize data within these confines. For the near term, <a href="https://github.com/">GitHub</a> will probably not be the place to store terabytes of data or act as the CDN for a high-volume mapping application. That is perfectly fine and there is still a great deal of value to be found within GitHub&#8217;s current generous constraints.</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/geodata-git.png" /></p>

<p>One aspect of GitHub (really, its underlying <a href="http://git-scm.com/">git</a> engine) that is of great interest to me is the ability to perform version control and configuration management on data itself. With GitHub, that currently takes the form of text-based formats such as JSON but it&#8217;s a start. In my experience supporting various customers over the years, configuration management of data has been a common gap in information operations. The most common, and inadequate, approach to this problem has been through the use of metadata. Almost two decades of viewing out-of-date, incomplete, and inaccurate metadata has given the lie to this approach. Metadata represents a separate maintenance workflow for which many organizations simply do not dedicate resources. Data-set-level metadata is also inadequate for volatile data sets in which individual records are updated frequently.</p>

<!--more-->


<p>I have worked with many organizations that had excellent DevOps processes for managing and deploying application code that simply had no corresponding processes for the data that the code was utilizing. We are long past time for addressing the importance of configuration management for data itself.</p>

<p>That is not to say there have not been approaches to addressing this issue. Since version 8.0, <a href="http://www.esri.com">Esri</a> has had a means of <a href="http://www.esri.com/software/arcgis/geodatabase/multi-user-functionality">versioning enterprise geodatabases</a> that are stored in an RDBMS. This approach does have the ability to track feature-level changes and manages their inclusion in the master version of the data set. Quite frankly, I&#8217;ve never loved the Esri approach to versioning. I think it gives too much responsibility to middleware when it should be the database&#8217;s sole responsibility to keep itself intact. Also, I have always felt the workflow is a bit too proscribed and takes too much business process decision ability from the data owner. That said, it has been the only real game in town for a long time so I have implemented it many times.</p>

<p><a href="http://www.openstreetmap.org/">OpenStreetMap</a> (OSM) has also been a success story for tracking feature-level version history. Its approach has successfully managed millions of edits to a worldwide database so its utility is certainly proven. Organizations that need to maintain their own data behind their firewalls cannot really make use of OSM itself but the OSM approach is solid.</p>

<p><a href="http://www.zekiah.com">At my own company</a>, we have been working with customers to implement <a href="http://blog.geomusings.com/2012/03/27/configuration-management-for-geospatial-data-models/">configuration management of data models</a> (logical and physical) but we are not really addressing CM of the data managed by those models. Even so, working at the model/schema level has still helped our customers improve their data management workflows by being able to identify versions of data models supported by deployed applications and helping to migrate between versions as needed.</p>

<p>The recent move by GitHub to support visualization of spatial data files actually introduces no new capability in terms of configuration management of data files. Users have always had the ability to store and manage JSON, text, XML and other formats in GitHub and git. My hope is that the visualization capability, and the inevitable exploration it will generate, will shine more light on the issue of data configuration management. In my opinion, this is the most powerful aspect the platform brings.</p>

<p>I&#8217;m also encouraged by <a href="http://opengeo.org/">OpenGeo&#8217;s</a> <a href="https://github.com/opengeo/GeoGit">GeoGit</a> initiative. I have not personally experimented with it yet so I will not speculate on the specifics of its implementation, but I am happy to see OpenGeo recognizing the need for a more open approach to feature-level version control. Since, however, it will be open-source, my hope is that proprietary GIS vendors, or their supporting integrators, will eventually support it as well.</p>

<p>Ultimately, I am happy to see both GitHub and OpenGeo addressing this issue. Although their approaches are different, they offer, in addition to the Esri approach, choices for organizations in terms of workflow. Many data managers, whether for legal, strategic, or other reasons, recognize the importance of maintaining version history of geospatial data records. It is important for everything from parcel mapping to critical infrastructure protection and many other use cases. Historically, there have been very few tools available to address this problem effectively but I am hoping that is starting to change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Focus]]></title>
    <link href="http://blog.geomusings.com/2013/07/19/focus/"/>
    <updated>2013-07-19T00:02:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/07/19/focus</id>
    <content type="html"><![CDATA[<p>While the majority of the geospatial world was at the Esri International User Conference in San Diego last week, I was at a different conference in Orlando, Florida. This was my third time attending the Children with Diabetes (CWD) <a href="http://www.childrenwithdiabetes.com/activities/orlando2013/">Friends for Life</a> (FFL) conference and I&#8217;ll be there as often as I can for the foreseeable future. It&#8217;s beneficial in many obvious ways; enabling us to keep up with the latest developments in diabetes research and technologies as well as keeping us refreshed in terms of diabetes management best practices.</p>

<p>The unexpected thing for me over the years has been how the lessons I&#8217;ve learned at FFL have begun to translate into other aspects of life outside of diabetes. (I do not have diabetes myself but I am a parent of a person who does.)  This year, perhaps because the ongoing Esri UC was somewhere in the back of my mind, it provided a different lens through which to view my approach to my professional activities.</p>

<p>The content at FFL is varied. Some touches on leading edge work in the field of biological treatments such as the <a href="http://www.diabetesresearch.org/BioHub">Diabetes Research Institute&#8217;s BioHub</a> as well as mechanical/electronic treatments such as the <a href="http://artificialpancreasproject.com/">Artificial Pancreas Project</a>. Other content touches upon achieving more effective day-to-day management using current techniques such as insulin pumps, shots, carbohydrate counting and the like.</p>

<p>The conference includes many pharmaceutical companies offering competing products, differing lines of research that stand a chance of superseding one another, representatives of government agencies, insurance companies and advocacy groups that can have very adversarial relationships. Yet FFL has an overwhelmingly positive tone. This because everyone is focused on one goal: the elimination of diabetes. Any approach that represents a step toward that goal is cheered by all, as is any technique that eases the burden of living with diabetes in the meantime. Ultimately, the various technologies showcased at the conference help facilitate progress toward this goal but the technologies are not the point.</p>

<p>Let me say that again.</p>

<p><strong>The technologies are not the point.</strong></p>

<!--more-->


<p>This is the lesson that I am reminded of and am bringing back to my professional existence in the geospatial industry. Our industry has seen a lot of innovation from a number of players in recent years. The flowering of mature capability in the open-source world has, in my opinion, pushed proprietary vendors such as Esri offer improvements to their products and better solutions to their users. It can be easy to get caught up in the petty intrigues of the industry. What are Esri&#8217;s real motivations behind their latest acquisition? What mapping library is that government system using? Is that API really RESTful? And so on&#8230;</p>

<p>All of the geospatial tools in the marketplace, regardless of provenance, serve to facilitate solutions to a myriad of real-world problems. And those problems are the point. As a consultant in the geospatial industry, my job is to help my customers find the tools that best solve their problems and help implement them. My responsibility is to keep an open mind about all of the tools that are available.</p>

<div style="text-align: center;">
<iframe width="560" height="420" src="http://www.youtube.com/embed/A8W8GGdD6pc?color=white&theme=light"></iframe>
(May be considered NSFW by some)
</div>


<br/>


<p>That doesn&#8217;t mean that I don&#8217;t have my preferences. I believe that open systems are better than closed. I believe that open-source licenses are inherently better at facilitating both enterprise scalability and grass-roots innovation. I believe that there&#8217;s a lot of really good proprietary, closed-source software. I believe that the greatest asset of any organization is its data. I believe that any tool that restricts an organization&#8217;s access to its data and its ability to share its data how it sees fit should be strongly discouraged. I believe that users bear the ultimate responsibility for understanding the technologies that they choose. I believe there is nothing more interoperable than a URL. I believe lots of other things learned through patience, experience, and collaboration.</p>

<p>If I were employed by a vendor or a vendor-like organization, I may take a slightly more partisan view. I also don&#8217;t begrudge such organizations their own biases. I expect them to be loyal to their tools and to want to see them used and improved through that use. I would be suspect of them if they weren&#8217;t.</p>

<p>That, however, is not the case with me. So, believing that open is better than closed, my responsibility is to ensure that my own thinking and my own mind are kept open. That&#8217;s something that I always know, but it is good to be reminded of it by being immersed in a community that is strongly focused on a goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoJSON on GitHub: Now What?]]></title>
    <link href="http://blog.geomusings.com/2013/06/18/geojson-on-github-now-what/"/>
    <updated>2013-06-18T16:04:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/06/18/geojson-on-github-now-what</id>
    <content type="html"><![CDATA[<p>So <a href="http://github.com">GitHub</a> <a href="https://github.com/blog/1528-there-s-a-map-for-that">announced</a> that you can now automatically view any <a href="http://geojson.org">GeoJSON</a> files that may be in a repository inside an interactive map driven by <a href="http://www.mapbox.com/">MapBox</a> technology. This simple enhancement to GitHub is probably one of the most significant developments in the geospatial industry in years. I&#8217;ll explain a little later in this post. It&#8217;s also important to view this new capability as a great, but limited, first step. I&#8217;ll discuss that a little later as well.</p>

<p>While it&#8217;s cool to click on a link and just see a map, it doesn&#8217;t take long to wonder about how you can use this capability beyond viewing data in GitHub. What follows are three ways to capitalize on GeoJSON in GitHub. Not all are directly related to the new mapping capability, and two have been possible for a long time. That said, the GitHub announcement may draw interest from users who have not previously considered either GitHub or GeoJSON, so I hope these approaches will be useful.</p>

<h3>Embed the GitHub map.</h3>

<p><del>If you click on a GeoJSON file and view the new map in GitHub, a quick view of the page source will show that this map is embedded in an IFRAME object.</del> GitHub provides a <a href="https://help.github.com/articles/mapping-geojson-files-on-github#embedding-your-map-elsewhere">simple embedding method</a> to display the GitHub map in any page. (Thanks to <a href="https://github.com/benbalter">Ben Balter</a> for this update.) It&#8217;s a great way to quickly publish a data set while also providing access to download the raw data.</p>

<p style="text-align:center;"><script src="https://embed.github.com/view/geojson/geobabbler/geodata/master/geojson/leonardtown_bldgs.geojson"></script></p>

<!--more-->


<h3>Stream the data into your own web map.</h3>

<p>This is not a new capability; if you&#8217;ve had GeoJSON in a repo, you&#8217;ve always been able to do this. That said, if you&#8217;re checking out GitHub or GeoJSON for the first time as a result of the new mapping capability, this is something you may want to try. I have had a page up for a while showing the <a href="http://blog.geomusings.com/assets/demos/mdq6/">county-by-bounty breakdown of Maryland&#8217;s marriage equality question from the 2012 election</a> that uses this approach to load the data into a <a href="http://leafletjs.com/">Leaflet</a> map from GitHub and style it. (Incidentally, the tiles in the map are also hosted on GitHub.)</p>

<h3>Stream the data into your desktop.</h3>

<p>A third option is to stream the GeoJSON data directly into desktop GIS software such as QGIS for further analysis. In QGIS, simply need to add a vector, specifying &#8220;Protocol&#8221; and entering the URL to your GitHub-hosted GeoJSON file. Make sure you use the &#8220;raw&#8221; URL that looks something like this: https://raw.github.com/geobabbler/geodata/master/geojson/leonardtown_bldgs.geojson .</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/add_geojson_layer.png" /></p>

<p>After a few seconds (or more depending on the file size), it should load into QGIS like this:</p>

<p style="text-align:center;"><img src="http://blog.geomusings.com/images/posts/qgis_github_geojson.png" /></p>

<p>Additionally, the <a href="https://github.com/RBURHUM/arcgis-ogr/">GDAL/OGR plug-in for ArcGIS</a> by <a href="http://www.amigocloud.com/homepage/index.html">AmigoCloud</a> provides a way to get GeoJSON into ArcMap, though you may need to download the data first.</p>

<p>UPDATE: Dane Springmeyer pointed out that TileMill supports remote URLs as well.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/geomusingsblog">@geomusingsblog</a> <a href="https://twitter.com/billdollins">@billdollins</a> - very cool, had no idea QGIS supported remote urls. TileMill does also: <a href="http://t.co/o3wxv2VkEv">http://t.co/o3wxv2VkEv</a></p>&mdash; Dane Springmeyer (@springmeyer) <a href="https://twitter.com/springmeyer/statuses/347483526171594753">June 19, 2013</a></blockquote>
<script async src="http://blog.geomusings.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Those are three (or so) quick ways to capitalize on GeoJSON data in GitHub now. So what next?</p>

<p>I stated earlier that I think the GitHub announcement was one of the most significant developments in years. I think it is best explained by <a href="http://feomike.github.io/post/thoughts-on-disruption.html">feoMike in his recent post</a>. As he points out, GitHub has made it easy to communicate spatial information in a way that is fully consistent with the web. Now that simple mapping is available to a large community of developers, it will be interesting to see where they take it. feoMike offered up a few early examples in his post. It&#8217;s worth a read.</p>

<p>The GitHub move is great for GeoJSON as a format. I&#8217;ve said in the past that the search for the next shapefile ends with GeoJSON. If the web is this generation&#8217;s dominant computing platform (it is), then GeoJSON provides a simple, elegant solution for geographic data transport in a manner that the shapefile did for the desktop. Support by GitHub is one more example of the community voting with its code as to what it prefers.</p>

<p>I also said it was a great first step, but limited. The mapping capability is understandably basic, though the documentation shows how you can customize styling somewhat. There is also a point at which the data seems to become too big to render (in either the map or in raw form). Bill Morris has identified this limit to be in the ballpark of 4.5MB, which can be easy to hit with GeoJSON.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/byrne_tweets">@byrne_tweets</a> <a href="https://twitter.com/BenBalter">@BenBalter</a> <a href="https://twitter.com/ericg">@ericg</a> <a href="https://twitter.com/ajturner">@ajturner</a> +1 for a solid number on max renderable filesize. 4.5MB is pushing it: <a href="https://t.co/cNTbA5Djqw">https://t.co/cNTbA5Djqw</a></p>&mdash; Bill Morris (@vtcraghead) <a href="https://twitter.com/vtcraghead/statuses/346825523521019904">June 18, 2013</a></blockquote>
<script async src="http://blog.geomusings.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>So this means that enterprises won&#8217;t be dumping terabytes of vectors to GeoJSON and loading them into GitHub. That&#8217;s a good thing in my book. It is, however, an acceptable solution for small data sets and quick turn-around data sharing. As with all things, you have to go in with the right set of expectations.</p>

<p>The thing I&#8217;m probably least worried about is how this affects <a href="http://www.esri.com">Esri</a>. Without any specific inside knowledge of Esri&#8217;s plans, I suspect some form of official support for GeoJSON isn&#8217;t far off. There are too many people inside Esri who get GeoJSON for it not to happen. If anything, the GitHub announcement may provide a bit of a push by providing a potentially rich source of data sets to consume. The real question is what form the support will take. In any event, Esri provides enough APIs to enable us to develop our own support for GeoJSON if we need it.</p>

<p>The addition of GeoJSON mapping to GitHub is a very small change in the scheme of that platform, but such small changes can sometimes lead to big shifts. It has been possible for a long time to use GitHub to host geospatial data for applications. The main benefit of this latest change, in my opinion, is its potential to get people thinking about the platform in a different way. With such a visible (and visual) change on a platform targeted at developers, I hope that it will motivate that community to begin experimenting with how far it can be pushed. If a hosted platform with an already-baked-in workflow for change management and version control begins to be viewed as a viable home for spatial data, it has the potential to change how the geospatial community thinks about how it does business.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoJSON from ArcGIS Server]]></title>
    <link href="http://blog.geomusings.com/2013/06/10/geojson-from-arcgis-server/"/>
    <updated>2013-06-10T09:54:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/06/10/geojson-from-arcgis-server</id>
    <content type="html"><![CDATA[<p>A while back, I posted about <a href="http://blog.geomusings.com/2011/11/15/fgeojson/">my desire to see GeoJSON supported as an output format from ArcGIS Server</a>. I found myself needing that capability so I recently completed, <a href="https://github.com/geobabbler/AGSOpenFormats">and posted to GitHub</a>, a first cut at a server object extension (SOE) for ArcGIS Server 10.1 that enables output of <a href="http://geojson.org/">GeoJSON</a> via an HTTP GET.</p>

<p>Using the SOE is fairly straightforward. If you download the code and build it (ensuring you have installed the ArcObjects SDK for .Net), you can simply move the project outputs to your target machine and use the ArcGIS Server manager to install the SOE. Once you log into the manager application, click &#8220;Site&#8221; at the top of the page and then &#8220;Extensions&#8221; on the left. Click &#8220;Add Extension&#8221; and browse to the .soe file. You should end up seeing something like this:</p>

<p style="text-align:center;"> <img src="http://blog.geomusings.com/images/posts/geojsonserver1.png" /></p>

<!--more-->


<p>After, that you can go back to &#8220;Services,&#8221; choose a map service, select &#8220;Capabilities,&#8221; and you should see &#8220;Open Data Formats&#8221; as a choice to select. At that point, you should be ready to go.</p>

<p style="text-align:center;"> <img src="http://blog.geomusings.com/images/posts/geojsonserver2.png" /></p>

<p>That&#8217;s all meat-and-potatoes configuration workflow that <a href="http://www.esri.com">Esri</a> has made very easy at 10.1. Once you&#8217;ve been through all of that, you should be able to go to your map service properties using a URL like this:</p>

<p>http://localhost/arcgis/rest/services/SampleWorldCities/MapServer</p>

<p>&#8230;and you should see be able to scroll to the bottom and see &#8220;GeoJSONServer&#8221; (which will change in a future version) as a supported extension.</p>

<p style="text-align:center;"> <img src="http://blog.geomusings.com/images/posts/geojsonserver4.png" /></p>

<p>Following that link should take you to a page that shows &#8220;GeoJSON&#8221; as a supported operation. From there, you should be taken to a page that allows you to enter in a layer number (required) or a query (optional). The layer number is the layer&#8217;s ordinal shown in the map service properties above. The query parameter can be a SQL WHERE clause that is valid for the layer in question (leaving off the word &#8220;WHERE&#8221;). This is consistent with how definition queries are handled elsewhere in the Esri REST API. At this point, GET and POST do the same thing though that may change in the future. You can use this form (which is generated by default) to test the SOE and get examples of valid URLs. For example, this URL returns GeoJSON for the continent of Asia from my sample map service:</p>

<p>http://localhost/arcgis/rest/services/SampleWorldCities/MapServer/exts/GeoJSONServer/GeoJSON?query=CONTINENT%3D%27Asia%27&amp;layer=1&amp;f=json</p>

<p>In the process of developing the SOE, I tested the outputs using <a href="http://geojsonlint.com/">geojsonlint.com</a> and the <a href="http://openlayers.org/dev/examples/vector-formats.html">OpenLayers vector format example</a> page (see the following screen shot).</p>

<p style="text-align:center;"> <img src="http://blog.geomusings.com/images/posts/geojsonserver5.png" /></p>

<p>A few nuts and bolts:</p>

<ol>
<li>I refactored my previous <a href="http://blog.geomusings.com/2012/08/24/togeojson-and-towkt-for-the-esri-fgdb-api/">extension methods for the File Geodatabase API</a> to work with ArcObjects for this SOE. The code is functional but I&#8217;d call the conversion about 75% complete. A close examination by an experienced ArcObjects developer may lead to some head-scratching as there are some artifacts from the FGDB API oriented code that I&#8217;ll be cleaning up over the next couple of weeks.</li>
<li>The SOE is currently output-only and only supports attribute queries. I plan to work on the ability to pass in a GeoJSON geometry to do a spatial filter as well but my GeoJSON code currently only persists Esri geometries to GeoJSON but does not yet de-persist. For the sake of consistency, I don&#8217;t want to mix JSON syntax, so I want to add in de-persistence before implementing spatial filters.</li>
<li>The SOE always transforms geometries to WGS84 for GeoJSON output. The GeoJSON spec doesn&#8217;t specifically require this; it was just my call.</li>
<li>The SOE has been tested with ArcGIS Server 10.1 only. I don&#8217;t know if the current code will present any issues with previous versions but I really have no plans to go back and test them. The actual GeoJSON generation shouldn&#8217;t be much of an issue but I can&#8217;t speak for the SOE interface itself. Forks are welcome.</li>
</ol>


<p>As can be seen, the code is still under active development but it works in its current configuration. It&#8217;s actually performed pretty well on a very modest Amazon instance so I&#8217;m somewhat encouraged. I&#8217;ll post some issues to GitHub as a nominal road map.</p>

<p>In a semi-related note, it looks like Marten Hogeweg of Esri is working on integrating GeoJSON support into Esri&#8217;s portal server project, so users of that tool may want to hold on for that.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>So&#8230; looking at adding <a href="https://twitter.com/search?q=%23geojson&amp;src=hash">#geojson</a> to <a href="https://twitter.com/search?q=%23esri&amp;src=hash">#esri</a> <a href="https://twitter.com/search?q=%23opensource&amp;src=hash">#opensource</a> <a href="https://twitter.com/search?q=%23geoportal&amp;src=hash">#geoportal</a> server. What do I see&#8230; There&#39;s multiple flavors of it? <a href="https://twitter.com/search?q=%23whatsupwiththat&amp;src=hash">#whatsupwiththat</a></p>&mdash; Marten Hogeweg (@martenhogeweg) <a href="https://twitter.com/martenhogeweg/statuses/343190756271464448">June 8, 2013</a></blockquote>
<script async src="http://blog.geomusings.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>I&#8217;m looking forward to checking out Marten&#8217;s work and am glad to see Esri taking greater notice of GeoJSON.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OGC Abandons the Web]]></title>
    <link href="http://blog.geomusings.com/2013/05/30/ogc-abandons-the-web/"/>
    <updated>2013-05-30T10:52:00-04:00</updated>
    <id>http://blog.geomusings.com/2013/05/30/ogc-abandons-the-web</id>
    <content type="html"><![CDATA[<p>Those are my words, not theirs.</p>

<p>It came to light today that <a href="http://www.opengeospatial.org/">OGC</a> has decided to <a href="http://lists.osgeo.org/pipermail/discuss/2013-May/011789.html">withdraw the GeoServices REST Specification</a>, also known as the &#8220;ESRI REST API,&#8221; as a proposed standard. I will not take up the relative merits of the specification or the implications of OGC potentially adopting an industry-developed specification that has so much implied workflow embedded in it. With this decision, three facts remain unaltered:</p>

<ol>
<li>The ESRI REST API will continue forward as a widely-used de facto standard in the form of ArcGIS Server installs and other emulations, such as that in <a href="http://www.arc2earth.com/">Arc2Earth</a>.</li>
<li>GeoJSON will continue forward as a widely-used de facto standard in the form of numerous open-source implementations.</li>
<li>OGC still has no JSON syntax.</li>
</ol>


<p>Yes, twelve years after the <a href="https://en.wikipedia.org/wiki/JSON#History">birth of JSON</a>, five years after the <a href="http://webhelp.esri.com/arcgisserver/9.3/java/index.htm#whats_new_93.htm">release of the ESRI REST API and its embedded JSON syntax</a>, and five years after the <a href="http://geojson.org/geojson-spec.html">release of GeoJSON 1.0</a>, OGC is still has no entry in the JSON space. Between Esri and GeoJSON, the utility of JSON in web mapping applications has been roundly proven. In the ESRI arena, find me anyone who willingly uses the SOAP API these days while the adoption of support for GeoJSON across the open-source GIS world speaks volumes. The industry has voted with its feet and its code as to what it prefers.</p>

<p>There&#8217;s probably a lively discussion to be had about where JSON should fit into OGC&#8217;s priorities. What is clear, however, is that Javascript and JSON are driving the web at large and the web-mapping space in the geospatial market. With no official stance of any kind in this area, it becomes increasingly difficult to take OGC seriously in matters of the modern web.</p>

<p>Howard Butler had a great point a while back when discussing the potential adoption of the GeoServices REST Specification:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/JeffHarrison">@JeffHarrison</a> I think it would be great for OGC to ratify GeoServices. It would cement their irrelevance to current and future developers.</p>&mdash; Howard Butler (@howardbutler) <a href="https://twitter.com/howardbutler/statuses/331405667837542401">May 6, 2013</a></blockquote>
<script async src="http://blog.geomusings.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>The irony here is that the withdrawal of the specification accomplishes the same thing. I won&#8217;t go so far as to say OGC has no clue or doesn&#8217;t care but, in the perception-is-reality department, they look pretty out-of-touch these days. Is this a problem with process? Maybe. Is it a problem with message? Definitely. The message I&#8217;ve gotten from this whole episode is that we can keep doing what we&#8217;ve been doing with our web mapping applications because OGC has nothing for us.</p>
]]></content>
  </entry>
  
</feed>
