<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DTS Agile | geoMusings]]></title>
  <link href="http://blog.geomusings.com/blog/categories/dts-agile/atom.xml" rel="self"/>
  <link href="http://blog.geomusings.com/"/>
  <updated>2014-10-08T23:24:50-04:00</updated>
  <id>http://blog.geomusings.com/</id>
  <author>
    <name><![CDATA[Bill Dollins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ArcGIS Image Services and Leaflet]]></title>
    <link href="http://blog.geomusings.com/2012/04/17/arcgis-image-services-and-leaflet/"/>
    <updated>2012-04-17T00:00:00-04:00</updated>
    <id>http://blog.geomusings.com/2012/04/17/arcgis-image-services-and-leaflet</id>
    <content type="html"><![CDATA[<p>I've become a big fan of <a href="http://leaflet.cloudmade.com/">Leaflet</a> for putting maps on the web. It gives me most of what I need without much of what I don't and is fairly easily extended, as shown by the <a href="http://geojason.info/leaflet-vector-layers/">impressive work of Jason Sanford</a>.</p>

<p>A while back, <a href="http://twitter.com/dbouwman">Dave Bouwman</a> <a href="http://blog.davebouwman.com/2011/08/04/leaflet-lean-mean-javascript-maps/">blogged about work</a> he and the team at <a href="http://www.dtsagile.com/">DTS Agile</a> had done extending Leaflet to support ArcGIS Server layers. Given that there are a lot of ArcGIS Servers out there, this is a good thing to have. Thanks to section 4(f) of the <a href="http://www.esri.com/legal/pdfs/e-800-termsofuse.pdf">Esri Web Services Terms of Use</a>, it's less useful for use with ArcGIS Online, but that's probably the topic of another post. <!--more--></p>

<p>I recently had the need to use an <a href="http://help.arcgis.com/en/arcgisserver/10.0/help/arcgis_server_dotnet_help/index.html#//009300000043000000">ArcGIS Server image service</a> with a Leaflet app. Specifically, I was using the USGS <a href="http://isse.cr.usgs.gov/ArcGIS/rest/services/Orthoimagery/USGS_EDC_Ortho_NAIP/ImageServer">NAIP image service</a>. This service is available as a WMS, which works perfectly well with Leaflet, but I needed to take advantage of some of the capabilities of the <a href="http://www.esri.com">Esri</a> service, such being able to set the interpolation method.</p>

<p>The API signature for interacting with an image service is somewhat different from that of a dynamic map service with ArcGIS Server so I took the DTS AgsDynamicLayer class and modified to an AgsImageLayer class. Because the image service does some raster operations on the fly, it can be a little slower than a standard tiled or dynamic service. As a result, I'd recommend only going this route if you need to allow your users to fiddle with some options. For most production web-mapping applications, you'll probably want to stick with tiles.</p>

<p>It seemed kind of silly to fork the <a href="https://github.com/dtsagile/Leaflet">DTS code</a> for one class so I sent it to Dave, who was gracious enough to accept it. Thanks to DTS for their work, which made my life much easier. Since they have day jobs, too, I'm not sure when it will appear so I thought I'd post it here as well in case someone may find it useful. Most of the code came over from the DTS class, with modifications I needed to work with image services. With apologies for the length, here it is:</p>

<p>{% codeblock lang:js %}
//Class for interacting with ArcGIS Server image services
//Bill Dollins - Zekiah Technologies
//Modified from AgsDynamicLayer.js by DTSAgile</p>

<p>L.AgsImageLayer = L.Class.extend({</p>

<pre><code>includes: L.Mixin.Events,

options: {
    minZoom: 0,
    maxZoom: 18,
    attribution: '',
    opacity: 1,
    format: 'PNG8',
    bandids: '',
    compressionquality: 0,
    interpolation: 'RSP_NearestNeighbor',
    pixelType: 'U8',

    unloadInvisibleTiles: L.Browser.mobileWebkit
},

initialize: function (/*String*/url, /*Object*/options) {
    L.Util.setOptions(this, options);
    this._url = url;
},

//public properties that modify the map

setInterpolation: function (interpolation) {
    this.options.interpolation = interpolation;
},

getInterpolation: function () {
    return this.options.interpolation;
},

setOpacity: function (opacity) {
    //set it immediately
    if (this._image) {
        this._image.style.opacity = opacity;
        // stupid webkit hack to force redrawing of tiles
        this._image.style.webkitTransform += ' translate(0,0)';
    }
    this.options.opacity = opacity;
},

getOpacity: function () {
    return this.options.opacity;
},

reset: function () {
    this._reset();
},

update: function () {
</code></pre>

<p>//        var topLeft = this.<em>map.latLngToLayerPoint(this.</em>map.getBounds().getNorthWest()),
//                bottomRight = this.<em>map.latLngToLayerPoint(this.</em>map.getBounds().getSouthEast()),
//                size = bottomRight.subtract(topLeft);</p>

<p>//        L.DomUtil.setPosition(this.<em>image, topLeft);
//        this.</em>image.style.width = size.x + 'px';
//        this._image.style.height = size.y + 'px';</p>

<pre><code>    this._image.updating = false;
    this._updateLayer();
},

show: function () {
    this._image.style.display = 'block';
    this._image.style.visibility = 'visible';
},

hide: function () {
    this._image.style.display = 'none';
},

isVisible: function () {
    return this._image.style.display === 'block';
},

onAdd: function (map) {
    this._map = map;

    this._reset();

    map.on('viewreset', this._reset, this);
    map.on('moveend', this._moveEnd, this);
    map.on('zoomend', this._zoomEnd, this);
},

onRemove: function (map) {
    map.getPanes().mapPane.removeChild(this._image);
    map.off('viewreset', this._reset, this);
    map.off('moveend', this._moveEnd, this);
    map.off('zoomend', this._zoomEnd, this);
},

_initImage: function () {
    this._image = L.DomUtil.create('img', 'leaflet-image-layer');

    this._image.style.visibility = 'hidden';
    this._image.style.opacity = this.options.opacity;
    this._image.style.display = 'block';
    //TODO createImage util method to remove duplication        
    L.Util.extend(this._image, {
        onselectstart: L.Util.falseFn,
        onmousemove: L.Util.falseFn,
        onload: this._onImageLoad,
        src: this._getImageUrl(),
        updating: false,
        agsLayer: this,
        map: this._map
    });
    this._map.getPanes().mapPane.appendChild(this._image);
},

_getImageUrl: function () {
    //construct the export image url
    var bnds = this._map.getBounds();
    var sz = this._map.getSize();
    //bboxsr &amp;amp; imagesr params need to be specified like so to avoid alignment problems on some map services - not sure why
    var bbox = 'bbox=' + bnds.getSouthEast().lng + '%2C' + bnds.getSouthEast().lat + '%2C' + bnds.getNorthWest().lng + '%2C' + bnds.getNorthWest().lat + '&amp;amp;bboxsr=4326&amp;amp;imageSR=3857';
    var size = '&amp;amp;size=' + sz.x + '%2C' + sz.y;
    var format = '&amp;amp;format=' + this.options.format;
    var pixeltype = '&amp;amp;pixelType=' + this.options.pixelType;
    var interpolation = '&amp;amp;interpolation=' + this.options.interpolation;
    //Some of the following parameters are supported by ArcGIS Server Image Services but not implemented here.
    //They have been included as placeholders.
    var nodata = '&amp;amp;noData=';
    var compressionquality = '&amp;amp;compressionQuality=' + this.options.compressionquality;
    var bandids = '&amp;amp;bandIds=' + this.options.bandids;
    var mosaicprops = '&amp;amp;mosaicProperties=';
    var viewpointprops = '&amp;amp;viewpointProperties=';
    var url = this._url + '/exportImage?' + bbox + size + format + pixeltype + nodata + interpolation + compressionquality + bandids + mosaicprops + viewpointprops + '&amp;amp;f=image';
    return url; // this._url + '/export?' + bbox + size + layers + format + transparent + '&amp;amp;f=image';
},

_updateLayer: function () {
    if (!this._image.updating) {
        //console.log('Updating layer NW: ' + map.getBounds().getNorthWest());            
        this._image.updating = true;

        //update the src based on the new location
        this._image.src = this._getImageUrl();
        //reset the image location on the map
        //            //hang the info on the image, we'll actually update it onload to make sure we don't reposition it before the new image comes down
        //this doesn't seem to work on mobile
        //            this._image.topLeft = this._map.latLngToLayerPoint(this._map.getBounds().getNorthWest());
        //            var bottomRight = this._map.latLngToLayerPoint(this._map.getBounds().getSouthEast());
        //            this._image.size = bottomRight.subtract(this._image.topLeft);

        var topLeft = this._map.latLngToLayerPoint(this._map.getBounds().getNorthWest()),
            bottomRight = this._map.latLngToLayerPoint(this._map.getBounds().getSouthEast()),
            size = bottomRight.subtract(topLeft);
        L.DomUtil.setPosition(this._image, topLeft);
        this._image.style.width = size.x + 'px';
        this._image.style.height = size.y + 'px';
    }
},

_moveEnd: function () {
    //console.log('in _moveEnd : NW: ' + map.getBounds().getNorthWest());
    //don't set display:none for moves - makes for smoother panning - no flicker
    //oops, that didn't work on mobile


    this._image.style.display = 'none';
    this._updateLayer();
},

_zoomEnd: function () {
    //console.log('in _moveEnd');

    //        //zoom the image...(animate it?)
    //        //L.DomUtil.setPosition(this, this.topLeft);
    //        //debugger;
    //        //it's gonna be something like this but it's not quite right - also will need to get/ calculate the correct factor (using 1.5 below) and change it for zoom out
    //        //and we need to properly calculate the new left and top - just hard coded approximate values below
    //        this._image.style.left = '-420px';
    //        this._image.style.top = '-228px';
    //        this._image.style.width = this._image.width * 1.5 + 'px';
    //        this._image.style.height = this._image.height * 1.5 + 'px';


    //for now, we'll just do this
    this._image.style.display = 'none';
    this._updateLayer();
},

_reset: function () {
    if (this._image) {
        this._map.getPanes().mapPane.removeChild(this._image);
    }
    this._initImage();
    this._updateLayer();
},

_onImageLoad: function () {
    //        //reset the image location on the map - doing it this way does not seem to work on mobile
    //        L.DomUtil.setPosition(this, this.topLeft);
    //        this.style.width = this.size.x + 'px';
    //        this.style.height = this.size.y + 'px';


    //this is the image

    //make sure it's visible and reset the updating flag
    this.style.visibility = 'visible';
    this.style.display = 'block';

    this.updating = false;
}
</code></pre>

<p>});
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
